<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pa3.3</title>
      <link href="/2021/11/06/PA3-3/"/>
      <url>/2021/11/06/PA3-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pa3.2</title>
      <link href="/2021/11/06/PA3-2/"/>
      <url>/2021/11/06/PA3-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pa3.1</title>
      <link href="/2021/11/06/PA3-1/"/>
      <url>/2021/11/06/PA3-1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-CSR-寄存器"><a href="#1-CSR-寄存器" class="headerlink" title="$(1)CSR$寄存器"></a>$(1)CSR$寄存器</h3><p><code>isa-def.h</code>的<code>CPU_STATE</code>结构体对应了状态机的一部分:通用寄存器$(general\ purpose\ register)$和$pc$. <font color="red">对状态进行扩充,实际上就是添加系统寄存器$SR$</font><br>在<code>riscv32_CPU_state</code>添加:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">rtlreg_t</span> _csr;</span><br><span class="line"> &#125; sysr[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><br>规定: $sysr[0…3]$依次存储$mepc, mstatus, mcause, mtvec$<br><span id="more"></span></p><h3 id="2-cte-init"><a href="#2-cte-init" class="headerlink" title="$(2)cte_{-}init$"></a>$(2)cte_{-}init$</h3><p><img src="/2021/11/06/PA3-1/g.png" alt="图一" style="zoom:90%;"><br>上图是初始化$CTE$的过程.$cte.c$主要有以下两个任务:</p><ul><li><code>asm volatile(&quot;csrw mtvec, %0&quot; : : &quot;r&quot;(__am_asm_trap));</code>将异常入口地址写入$mtvec$</li><li>注册回调函数</li></ul><p>$csrw$指令需要我们自己实现,查看<code>nanos-lite-riscv32-nemu.txt</code>的$cte_{-}init$部分的汇编代码, <code>csrw    mtvec,a5</code>的汇编代码是<code>30579073(16进制)</code>,查阅手册得知,高12位$0x305$实际上是mtvec对应的编号. <font color="red">添加好译码匹配规则之后</font>, $pseudo.h$里面添加如下代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mtvec_csr 0x305 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mtvec cpu.sysr[3]._csr</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">def_rtl</span><span class="params">(csrrw, <span class="keyword">rtlreg_t</span>* dest, <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> csr)</span></span>&#123;</span><br><span class="line"><span class="comment">// 根据高12位立即数 csr 判断是哪个系统寄存器, 然后写入信息</span></span><br><span class="line">    <span class="keyword">if</span>(csr == mtvec_csr) mtvec = *src1;</span><br><span class="line">    TODO();<span class="comment">//添加其他系统寄存器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info"><p>$Q1:$为什么<code>&quot;r&quot;(__am_asm_trap)</code>可以将异常处理入口写入$mtvec$?<br>实际上,<code>__am_asm_trap</code>是一个函数,也是一个指针,存放的就是函数的入口地址.<br>$Q2:$<code>__am_asm_trap</code>的地址在哪?<br>查看<code>nanos-lite-riscv32-nemu.txt</code>可以知道其地址是:$0x80000730$(这个数字未必是定值,具体看情况). 通过$csrw$指令,<code>cte.c</code>做的第一件事情就是将该值写入$mtvec$寄存器.</p></div><div class="note warning"><p>更多的细节?!<br>查看<code>cte_init</code>的汇编代码:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">800007b7         lui a5,0x80000</span><br><span class="line">73078793         addi  a5,a5,1840 # 80000730 &lt;_end+0xfffed730&gt;</span><br><span class="line">30579073         csrw  mtvec,a5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8000a7b7         lui a5,0x8000a</span><br><span class="line">02a7a223         sw  a0,36(a5) # 8000a024 &lt;_end+0xffff7024&gt;</span><br><span class="line"></span><br><span class="line">00100513         li  a0,1</span><br><span class="line">00008067         ret</span><br></pre></td></tr></table></figure><br>前三条指令的作用就是将异常入口地址(<code>__am_asm_trap</code>)写入寄存器$a_5$,然后将其写入mtvec；注意<code>cte.c</code>的函数参数是一个函数指针,存放在$a_0$里面,而$36(a_5)$实际上就是usr_handler的地址.<code>sw  a0,36(a5)</code>对应的就是<code>user_handler = handler;</code>, <code>8000a024 &lt;_end+0xffff7024&gt;(具体数值可能会有变动)</code>这个地址自然就是我们在cte.c初始化的全局变量的<code>static Context* (*user_handler)(Event, Context*) = NULL;</code>的地址!</p></div><h3 id="3-实现新指令"><a href="#3-实现新指令" class="headerlink" title="$(3)$实现新指令"></a>$(3)$实现新指令</h3><h4 id="3-1-ecall"><a href="#3-1-ecall" class="headerlink" title="$3.1\ ecall$"></a>$3.1\ ecall$</h4><p>$ecall$是自陷指令,通过与<code>isa_raise_intr</code>的协作,它主要完成以下工作:</p><pre><code>(1)将当前PC值保存到mepc寄存器(2)在mcause寄存器中设置异常号(3)从mtvec寄存器中取出异常入口地址(4)跳转到异常入口地址</code></pre><p>代码实现:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// intr.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mepc cpu.sysr[0]._csr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcause cpu.sysr[2]._csr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mtvec cpu.sysr[3]._csr</span></span><br><span class="line"><span class="function"><span class="keyword">word_t</span> <span class="title">isa_raise_intr</span><span class="params">(<span class="keyword">word_t</span> NO, <span class="keyword">vaddr_t</span> epc)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Trigger an interrupt/exception with ``NO&#x27;&#x27;.</span></span><br><span class="line"><span class="comment">   * Then return the address of the interrupt/exception vector.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  mepc = epc; <span class="comment">// 将当前PC值保存到mepc寄存器</span></span><br><span class="line">  mcause = NO; <span class="comment">//在mcause寄存器中设置异常号</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> mtvec; <span class="comment">//从mtvec寄存器中取出异常入口地址, 并且返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pseudo.h</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">def_rtl</span><span class="params">(ecall, <span class="keyword">rtlreg_t</span>* dest, <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> imm)</span></span>&#123;</span><br><span class="line"><span class="comment">//查看EVENT结构体可知自陷事件的编号就是 1 </span></span><br><span class="line">  <span class="keyword">word_t</span> Event_Yield = <span class="number">1</span>;</span><br><span class="line">  s-&gt;dnpc = isa_raise_intr(Event_Yield, s-&gt;pc); <span class="comment">//跳转到异常入口地址(__am_asm_trap)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><div class="note primary"><p>通过以下流程图梳理一下,$ecall$的调用过程<br><img src="/2021/11/06/PA3-1/h1.png" alt></p><p>$Q$:<code>__am_asm_trap</code>在哪?它的作用是什么?<br>$A$: 在$trap.S$里面,将所有的通用寄存器和系统寄存器压栈,为<code>__am_irq_handle</code>准备好参数(后面会提到),从<code>__am_irq_handle</code>返回之后恢复上下文.</p></div></p><h4 id="3-2-csrr"><a href="#3-2-csrr" class="headerlink" title="$3.2\ csrr$"></a>$3.2\ csrr$</h4><p>跳转到<code>__am_asm_trap</code>之后.查看反汇编代码, <code>__am_asm_trap</code>做的事情就是将32个通用寄存器保存($sw$指令), 同时将$mepc$等存储到寄存器里面($csrr$指令), 接着跳转到<code>__am_irq_handle</code>处理函数.<br><code>pseudo.h</code>里面添加:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mepc cpu.sysr[0]._csr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mstatus cpu.sysr[1]._csr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcause cpu.sysr[2]._csr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mtvec cpu.sysr[3]._csr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// csr寄存器在指令当中体现为编号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mepc_csr 0x341</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mstatus_csr 0x300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mcause_csr 0x342</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mtvec_csr 0x305</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">def_rtl</span><span class="params">(csrr, <span class="keyword">rtlreg_t</span>* dest, <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> csr)</span></span>&#123;</span><br><span class="line"><span class="comment">// 将csr寄存器信息写入目的寄存器</span></span><br><span class="line">    <span class="keyword">if</span>(csr == mepc_csr)*dest = mepc;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(csr == mstatus_csr)*dest = mstatus;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(csr == mcause_csr)*dest = mcause;</span><br><span class="line">    <span class="keyword">else</span> panic(<span class="string">&quot;No such System Register!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-3-mret"><a href="#3-3-mret" class="headerlink" title="$3.3\ mret$"></a>$3.3\ mret$</h4><p>好了,现在我们已经跳转到<code>__am_irq_handle</code>函数了.在实现$mret$之前,先对函数行为进行分析.</p><div class="note info"><p><code>__am_irq_handle</code>的函数参数来自哪里??<br>$A:$答案就在<code>__am_asm_trap</code>的汇编代码中.<br><code>__am_irq_handle</code>的参数是$Context$指针,一个$Context$结构体应该包括32个寄存器和3个csr寄存器(这里先不管剩下的), <font color="red">由寄存器$a_0$传入, $a_0$存储的就是$context$的首地址</font>, 前面已经讲了<code>__am_asm_trap</code>将32个寄存器等压栈,形成一个124字节的栈, 在跳转到<code>__am_irq_handle</code>之前,<code>mv  a0,sp</code>的作用就是将$sp$的内容写入$a_0$,使得$a_0$能够指向结构体的首地址. <font color="green">所以参数是由<code>__am_asm_trap</code>准备好的!</font></p></div><p>接下来,我们对<code>__am_irq_handle</code>的汇编代码的一部分进行分析:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">8000067c &lt;__am_irq_handle&gt;:</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line">8000a024 : 全局变量usr_handlerd的地址,存储了do_event的入口地址, 写入a5</span><br><span class="line">8000067c: 8000a7b7            lui a5,0x8000a </span><br><span class="line">80000680: 0247a783            lw  a5,36(a5) # 8000a024 &lt;_end+0xffff7024&gt;</span><br><span class="line">---------------------------------------</span><br><span class="line">80000684: 00050593            mv  a1,a0</span><br><span class="line">80000688: 04078e63            beqz  a5,800006e4 </span><br><span class="line">判断handler是否为空</span><br><span class="line">&lt;__am_irq_handle+0x68&gt;</span><br><span class="line">---------------------------------------</span><br><span class="line">8000068c: 08052703            lw  a4,128(a0)</span><br><span class="line">注意这里的128(a0)是mcause,请自己思考原因</span><br><span class="line">---------------------------------------</span><br><span class="line">80000690: fd010113            addi  sp,sp,-48</span><br><span class="line">80000694: 02112623            sw  ra,44(sp)</span><br><span class="line">80000698: 00012a23            sw  zero,20(sp)</span><br><span class="line">8000069c: 00012c23            sw  zero,24(sp)</span><br><span class="line">800006a0: 00012e23            sw  zero,28(sp)</span><br><span class="line">---------------------------------------</span><br><span class="line">将a4即(mcause) 与1(EVENT_YIELD)进行比较</span><br><span class="line">800006a4: 00100693            li  a3,1</span><br><span class="line">800006a8: 00d70463            beq a4,a3,800006b0 </span><br><span class="line">&lt;__am_irq_handle+0x34&gt;</span><br><span class="line">---------------------------------------</span><br><span class="line">800006ac: 00400713            li  a4,4</span><br><span class="line">---------------------------------------</span><br><span class="line">800006b0: 00e12023            sw  a4,0(sp)</span><br><span class="line">800006b4: 01412703            lw  a4,20(sp)</span><br><span class="line">800006b8: 00010513            mv  a0,sp</span><br><span class="line">800006bc: 00e12223            sw  a4,4(sp)</span><br><span class="line">800006c0: 01812703            lw  a4,24(sp)</span><br><span class="line">800006c4: 00e12423            sw  a4,8(sp)</span><br><span class="line">800006c8: 01c12703            lw  a4,28(sp)</span><br><span class="line">800006cc: 00e12623            sw  a4,12(sp)</span><br><span class="line">800006d0: 000780e7            jalr  a5</span><br><span class="line">跳转到a5, 也就是执行usr_handler, 前面的几个指令准备了函数调用的参数</span><br><span class="line">---------------------------------------</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><br>从<code>__am_irq_handle</code>正常返回到<code>__am_asm_trap</code>之后,<code>__am_asm_trap</code>做的就是恢复上下文,并且执行$mret$指令,执行”异常指令”的下一条指令.<br>因此,mret的指令也就不难实现了.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">def_rtl</span><span class="params">(mret, <span class="keyword">rtlreg_t</span>* dest, <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> imm)</span></span>&#123;</span><br><span class="line">  s-&gt;dnpc = mepc + <span class="number">4</span>; <span class="comment">// 执行&quot;异常指令&quot;的下一条指令.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note primary"><p>整理一下整个过程:<br><img src="/2021/11/06/PA3-1/h2.png" alt></p></div>]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab2-内联汇编</title>
      <link href="/2021/10/30/Lab2/"/>
      <url>/2021/10/30/Lab2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ea8063fd4fa9de83a66257f0634928617dc018f3906e47a1d9fbcc6e1b44b8ee"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内联汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PA2.3</title>
      <link href="/2021/10/26/PA2-3/"/>
      <url>/2021/10/26/PA2-3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc0ea7638f51f2aa6404f135724e3a89e89a28c98c023c9e944077c2bd77ceb2">98c5eac1e431cec725e9b50c1f9552a7c277b5b6439837c31a38c26f9be69e5dbdb275d4d6ff0f0e97f1bb473a2baf5d2e70a9e9fc8e2f40d96a22e19cf945e731eb5d46d00ed818e92cac62bbf087de7652fad7fac50f3b7f860e9873a436618b208842a915315cc4ce4418f3cef8ffee0ad70f9ed25213aabdf66649d40cabfb0870ca2575ef178d54612ad4569c0b083fdf68e0ea5f3c55375d9b5888955908d3e3e726f5af4b244b6d52d7f112ebe25e5fd6231a44a43bfbc9972a85a3c436f9847ac2b8279162727caee9c618ff2c60ffa1f01f80a46ef057964aa844807746882bd07b8937e2e9871bb40f27fff04ab815240e19ba1fbecd60f8fad94a5f909c94c50fa54132c224061dbb971f7540b97b209a8ced43306a268b06e5e7773ee2343e7e4505412ec2dd8cc82ea09fdfad1e50d58d3e227b66b6b9ddef4205a6ed03836d16d8ae633746611b9044b26cec3ba58e2a402f7b68533934c68b4305895bc7a1d6415c224a1ff2cc0b64de2716434f9b13a0b079bf12f65403503642c7eeed29bad35267892e5cfdcdc41b2a96b9381d0c0c8056d0433769cc397873e3240ce0a07b19b8540b414e4d347933a72db1a9944d7b86618dea7c617992f6fe3e86798ff0c0b673308c8804dff16060e1d95445bfddf2d7ec1cbadcd106d116f9e76ace91ce326ea6e21d4243f2146ff7d163e13fa3c08113f4d537a7fa411346f5b0cbb624b60972ed94fed4928a0da2c1b4e2d396148d544f7a62b544328f26cc5f951d5bce8ba4fb30f56185f5cbbcd336b57bb48e1b4715c245e0017757ddd360af60faedbb44596208755da9f53737b640c8bf3f9a89518c38b0d60cb6ef675fcdb86013aa18fc425f14b88af2782928910e8968c69167f36589425e1ce3c46fb6cafbe2c576017500bd0fb0953674991c0b2e3ad460eaac18876459e0b609a2410d2bfdcc2b6b4236edd1b8d5ba06266a35f21d5f1c569d3661d51ba464b092da800ac14e3e0a2f7ab14337950b49cc7d1e14e201923db830deec8cbc60a2a7041a660885a98056233608913005235fd24f20bf41fe331f0683043a077f46b56b3cd695b5e3941679b55774dd01891407bc6b26e6bb48cd8916aae61711654371724b45a9ce187d1f1e217b41e6b0bd405bb3f5892b692f07b32cf5b4e07db59b380b96c7841605c495cc980c21c01942070b4ee9981657fc912cbf802dbe95712ca6af08b710afe072221bf6f709dd3e5381fb7bf4488dbf3afd11425b8239dada5d0aced654db8e7dc60b94547302c2f0fde4f858636bdb91fa1806aa13e55122df8a09b8de1783a95185ca482567b74adc4eefc2c76521d938b6f0995d6c761ad1bc3a6c255e70f9f59ef65c652710b4972d13f4316fbca8e4dbda55cd92d2c74cd2f562dbd3f14d6a9918a65186a9c86464333cc65d330b1333ffe61c453688d3f026721e93fb3db7de532cdbd7a9ea434c68c542d07ce321b44168fdd433a24d6bfea11e64192b787195a699278c09841da8d9e782133381742c68c1220fc1ca1e42c6155c54f31a57fb3e1bbd8476ed53cce70556134b15c80e6adaa5493223e17bf8972d849a3e6131a0770090a90d6a02990477392c59229d623a99f3db59920c59f4662f8ed47fdf5fdc9de1d2c37bbf34d50e426898fba8b9d7ace0c087284d13777ccf4b30eac0af2be763695f6ae4a63e28ae7072bc554fd66a5bf29eef44af0faf2dd1d135574db6a79165974a3c6558d7bdcb26ff53610ecac19b21271b555809c19206a91a420d14549d6d9cc04d326ac519e5f6cccfeb0da0360c7822f0ecab507164475eebdf1b7656e26e0a31a5cfa776d993f8b56e632185b7d51d39e9978ff37619f8d01d2c58a28b3f2d16f530f845732b0e5e95eb8eb41e148781168731a809d943342becc5e6343008713040728f3658d1a7d57320101cf9db2c347e294a03413a129df7181369a3624f868c90c7a975c920ac33c1d6000bb079035fee0e28d4a941303a4e3f5455d63ce20d9f94be9eab978f0d4fb859dedda1e93d6374fcbae70b5b39ee1ebc85140fd05e33df61fdff77c2ed44f47ab170efd38da427167e74388919c490c06a956d4bbf50a6b0ee0ce022df51e6533557aa23e43e19768862c9040ce86cbdfc08ab6aa4c6a4d7857b71b4eed66542b363ce82957d8014c85c075b5dfd1bedbd1b89fab48573afa519b8f759ec261778abf1c48bf97a36c676dfba9fdee9bed93a81f5dc63fdcf5e446ce7ab930dcdc7ba2671d836b17fbd05f81379ca247cce3833852242d6d15ca0ca729495bc0ca322bc8811a80e43a45aca2769c0e00a3851ce6a9526543db282e3187ca3792cc4bab1fbce5b274124f808e72abbaf70568722d7ccd5f42d0fd6b7605347ff326266ff55dac8c3c5158f61ca639612b1087c7e2adf446cf49bb80c836ebe3fb9ea404174987298b1f292f391220a753caa45a4a0a06d81802199bdbf3083e1f8baeedb3088d0908f84ff9f10c84ab7d8f7dd6f5aa6d530b248c4581ba75a37ea0f0fee2c0e402d1d27988e9c99ac4310c037fa71a9466a0b53175b92ec22b6f6c9b42e434464e090b31e2a566884927325187a1f71d34ed6009b0a37a1e5b90b5d10a9f4e8d6238918c1e21f76c83ff3b1d6f7ffdfde2a8c30e010e4f29d364f535ca906bf93767f1c3caf1b9f462cb927e224039e4ea719b2c8a2a009ddf4800ef4526f2e4f014b9682e419e4afaa4ff93ad3cbed2ad743ca0e5f3a833145e3f05863b20ce7ffe619f90fcff836e4559f182813e6b6c55354a74c8043202c21ac59182f97755808c135476920a85cc5eae2a380f3bd070f64544caa7d49dfd5515c100b303835eda5f322187ac949b53d23cfe622eb841dfceb28e139173145eabdcbc0f467813cfbf67ff6c2d371385fac7fffa0f5da6d69bced87b6b086bdd6bfd2687507fa307148584d904eb3f790a39a6160b241b8fbe41192c41dc7ff8994cfc62661f80b2c8d2b942a1c55ab52581813c59b107a7aad1aba310b2826e9701266d023ab3e17cb2ccdcd211f4a2b7027d24f69548afd35bdc149c1b8f7298b2251fc6bf0746e07d2b054e496b84328c90f41000ee9285912dae950debf3c0bfb87e7f948c4c9a6aed2178ac8bee7e188a80fd3cd84ccf6a57fc8cc6f46a5bbe0162d18f997953895d6231f9fafdbe2112ddb3fbaa1d0cc66ea40c7d9286aafe106534dc7c4ae313dbd58285738368cb77ed627fd9acf4f7ff9032ffcfa7165ba720139b12864a370bd2c208969c82fe22dc544ebffeba23fcab05d4d052895d4e1fa524b2ebd56b50cbf53960ac5f8ad84e61522fd683fbcd949d3a554502914713e945f247ca231961fb5c0857a1c3e70cac1b8d59e2ed1e3282f832e8a4b48a9fb74c8bcf2a324edc86d71c943aa99d3f204ca41dfed7a4b8208231b43b8e3d978ca41d0c55ade3ffdb9f7fc178f845f1d21fef2405c1716a7e831c2f97ef85aa05c09ec2b34dbd47d66c3d2a3b64d00c4596ca3d9a731507c9bdedb91bef10414926a0f845ffb9d109443428b7a43868b740b235de6f331cdfbba18f346c240277eb566d26d75ac7017033f20d60adc48d92d86cd2d28ba0803d7c44247d81faf654d81e1999527c761b250ee67781506b71fb633252e8fdcba5639901ea92d0447b956b15e5d06d3390fa9d4b4442e2ed51ade4133f3b06b0ce70d6edc7c9c700ca0b660d7a6822f279a55b33918fc99c5d7d105c5deb092cfcc4c6aab1cdef5b67b173bb57b1e3c6617923c2dada5271703f54fd4fa91cd697eddaea17f23d3a4153e618e3ea8873698c77e384568a868ede77cd79943058b5afc13dba719dba463cbdd2ebe0b43b31c802bdccb48c92769187998cc380deaf0690ec5321cb45e73f8c64c598594531dbcaf78ce2a6047be4279f2acd63f2d22480261249fb953fa477bd414c803ac72ac66417a6b57942009f2a13c0b474de3f480e487f337f97bfd4933a605cb1c6d4002e8d9e24e71adf41f49aaba2971820fc2d3d7cd7a9097f3fab11e5f7d7e89a7a21bf1aac4d87833c9856c531c66645dd0f520b7c6c40b1978ca1cc92830393de463757172b0f388315b71ca3e66d69d56452b9c1b43c570dfc1acf52ece09064358be21f1f44dd79c7fbbdd881a4039eb5de7fdd72a6eae36d7704ef6698d90e1405e95d2acbca347075a851e0441ed1b89263ad7b8842c988be8dbc7b2b4d38b596bef049315027f1a40ad6ca9e9630174ed462b1fef0a70450c5e3a8d8d64c8d3c1f4d7e0e87063c3a89028b3e97be1b2c5a6a84e3dd62ff94257d02706024f518d3e4617882feed75d79636542d1c146f6413cfbc6733f33c8634bfcc9b79d7eff1788faa38be42aff2a862a68fc3b5af59de905a0fa4a87b477c6f04d67d354fd9fb2bdd81d189e785abf99b7b61571bd4930d2014a4673ac6195155db8a3b0e36015caf9adb39bf3954bf8f6618c8648d01ed35a67fe3a6decb677a6426f645d645aaec6f14a1c51260974e8ecd028ce5eeea752e2ddae1e52a4cb2aa8d8161ae622a2459330156080e0ecb0b289c6070126034d8398b300e19278b90a02ea5cb31c9c8399774a374141d736325eaddf1ae76a6777f80c58e944575bfaa50c0af2d101080fe7dffc3f95460a763aae0498e9c343c62f96cc84807c39ffd59ccde05092d301e432cb7adae5d184e7c9ed8af288c3f6cac14d138f98fc8bf3cbeffcb341c604967d44017bf53071a599e32d7d61715e290356e984a3794e9d425898ffe722e813e2fe354e2fe2a1a4b7b2ca77b59f60415f43c2b7b9b1713c00d2f003b90b6bdb19a580e0bc95e4441b77808ecd4db50dbccc1feb24b21676f156e1b5d2c2d20b1fc5aa986c3b3aa31fdf37cdd8fff59d8a44b23d4942adae33e57d5df2bb69a977b79c33eb0b8870d2d52e503e3c876b81af21b96629446b813c44bc91911b22a55f62f451787d0f0e0700693c80eca5463f72ce9eea69ad1637eee0d570512b2ffc4d8e9289a1a1e7ab130aa2db5eac6f1e9e58228dc7cda38ab48154ee3a16dd665aca81e0514b60a1a3b07068dd79ddcc20cc18350b06a26893d2df83ff3fccf5a7f4893a3524576201015a09c8f97532d992115368d59386b25798afc08be16b0af5e27b6f731369c4dfb4a85ceed790a86c8667c290aed5fe17f10dc7b0aab26442bf5fef2124c520fff23c43a55be7debedd33dd04314c2a8025981c4425b18f98dee4a1670c33af14d52a5ab9f29b157d266e2284369bef415fa57d6533d1f04678b92346a778dc9cc9916a208d3c6fc53db5a88592890c792a9a4ec9ba89653e2f8f63576b958af8cecd7e64fb36559e78e8daf8b23a650d233bb850f105c67d0699463cdc95d78908ff6be7c70f2e9537c9e939bd7df5f73b8d3e77e12a6ecb73590a168804e6f5a40c8c1f48861fffa86a0de3907bbb2a01ef3f9f38f4ea0d34b5b500fc19bfdf8214c551ce28b5a6ff80ce6059bdbfb92cddc08928a228b8ff294be97060252bf8691eb1a2249b0a33da314d495a2d983b6a2f49ee7afae9e2ae0ad816d8d68ec6a0a05c1eb7ff97579a8f4f3216eff7aa5cdf7d46b3216d6424951c34b0e0b69303e079cc3bb31f56d9b79892b55a76dd5c3bffb1c7d653c3c9b9c4dc94c354caceff1ed0206d35a48a2703761a1fb7eb32b50dc26e0197ce9d18640ddfc4ccac7a74553a5f6717cb3ab570212b7a922e2aec4ae5d031d5056da147f9be3f6128f0cfd12d44c2f7b4c06d10ae75cf268a9579e85e8e6de89b7d08467a1b89bcf03a6a31e2503a1c88c2ae7ac89d0e33d18119d649f1fa7414f0425934355081fed87ea5a86aae385d9fb57d3472f1e8938e349643cda0625bbe9896df63a35a5a6372e2ec990a3fc68b7a88856e26b878a2d35db898259d2f5477cf5a01339259be01531885e4b422c2402b919eceaaa06a1c1b76daa74f08c8d40e1cd0a0c40cc05baea9ffd635bedc93b7ac1b890cabd0a6a950382f7e21c9a8ec71db5317e56be7883e7e72a5773ca7c2f183d80c77690daaac7c42267ed264006df12a579de60cfc1d2af8eb6f185a516374e670eece33471da827225d4f17005108fa2d6256c40835f38e7b7e88bd0ccd336e4c73f1d67c6713e9c7a1b4e208a28d47ce3ff536883eb0e2485df1a9a2d842b71409c9b64d53e17de92279dd708d3085ad2844f0fdf2c7eb251dc4f2465458ce2874315d87336bc83434ea3bab3168e8e1b91d12809c62f08314c0f5c12ce063d7a0a363f8d1a90eb9b1b4efd34cce5b023f848bad8740a2057bfc7e4a7de88b7de6a8fa33eadae031fb09552edc3d097dd95a7d4673f258179d8e3bbf61018fe1f822a0968072538bb12cb355a24aedcac578cff32c4db5d434d1f2a604204c0b475286564bad97edea92d562ba62b2fea29170becc3c4dda7113aa72cd0d42acffe7fe7aae092ad2405f1dc50ae7f9eb31ec17f5d623e59e9d7dc426f83457e98411517755de82ca403fa68d7cd5ee357a61aa60a6bca407e71fbcceb01d82ba7d2df351ef43a952fcc17adb8db480706c380b8660edf276393220d8bf0dde4ac509aead6cc5924d206c6d5f05d07669cddac8b36bd92286be6bb68924fab4990f6512e9d6556f5cfbdc0401fd959c3a5d005cc9a59e6594c3ffccfcd3a735bd9671c551e0fc1f36fd28881758d748192dd1a1f54318851134d075e2f3e4ac4d02127b67d34b5bce5c7f678b6a646a9e2194a219fb4d5983742eaf21266a80792315f3212f1e83ca337151bd324fe87bbc94445886a6f7dccf9dfcdb8a84d4f4eabb179d9f9110bf3567fb410c6a8d5e906d4967a26b273206dc9f17e677cde36b7517172b091e6119e8341543c7fcd295747f680f25e026a82d12c01aecb07c0847a76e76ea1e474ec937afedc04e5077e1e86bd3f0b94255ec2de65b046fba4a44af031d27973bbda0b4077e55f4c89d35922d786a1b52e7ed9e7dcc9c857b4a6b4da48541397096299e2f24ddff05c8337edb2830f640dda0c34ba87dde65a9f2f951bf43cfda187e7072489889dd68b729ef2a0cc97c6a5d57442070854c58dd2a49c4496f93ee3e6ef782af9cafc7259d32402ba73a877ec7152703513647fab16cdf19a450d219b38e866936919bedaf219c38aa2037ca52d675107cea7d618b4cd2b7508bee7999d7c59828b70033b9b301c90dd95322ee52f9da39630e00ec8d9a35041e3ea08779361c7ffda24e216176c61445d104482e6b808ac093a293b66b27b1d3460679bc604ab0ed00c5e143b2b4f79eefbd0bd68a5a32803213a87e45f3c63e8059d4f1c0788bb668d5f9243e6cc0338efd8377159c498cc8899af9df830fd71f31edeabd364f8253401173318da3b3f65a4e2d3a1e5ceeea3c9f0ee2d6e4a93df3c8e56ed80fe896550bc67abd356b945d012343e4ce123519af7ea37ad761a99215356bc96f6fcede1f8a233355701142e4c8cfb8635a68f61f8fcb98fe998d0ee8b59520a2d98a625931a2ed9bdd9fb5265f81778d64bf325f49fd1e52b00f4dbecd33f0fff01c579bcd6775530bdf168ceea9b5fe9f47c838b895ec645db2b6dc70fa1a7da199bd812c76e0d7a55e57847a8cd2c2737058d4c36eb96fc576ea7d82007f5a9dbdc9c82ed300f39c87c61044437ffde53fa1d9163f83e79af752b24a8d9c6fbbd1bc0eb5d7b5858cd85b2f72c4d2086f8bfc93c4550a4e682a1afe03ad868cb3263b6e06647f8e36ba010306e3d5875dae1b133fa51a147b0e0f45776979dfa506e838271dcf28ca9e5d2814e4dd8412df477543a6f909a290fe580279bfe6392b08164d76c7301604d183274e728be9f32b5a3ec7a3fc187999ebf664d2bc1af45bcf1a687dc1d82aaf61be158d2c352dac9d8aae8df7d023d049c255b51fd11b85cd822b19faa1cfd15a6cb0bea7e35d64994013d5613f2fe469a4df4971b2a21c687c2ba5267344c052a7597384377584f1fc2fb45540bc6e6f616102efb31299665b42eb15df1db3ab537e0d300d965ab315efef4ceb6a8ea3d9b34b282a4962071ac0051d0d40f6e267db8875adfcdb6fced6f0c9dae0fbfd64fad0f5fa81089d4ae4d6132584771efb6cbc73cfb8814d5a788a96e86b31fdd6f1945d72883aa0b58f1e5757fe70b590d2a43fcb7536d4adfb9f8df07d47884b13a2231871472ded089359b6e73603bc81b5034f9f54fda4b6504455ea395ed1a5f26a1da5db176844c1ef6412c82551d13b657c074a1acc7ed97a6a505f5f0ce1b9913801e92e82369141559f75773c739e25a95003607eb2f871a9fc69369fe5aa586a524efc09ad5aae3bdbfedea5ef99f12c579f9e9ec90082d7ae17a09447f100f5474b9dccd7d9844654cbaa4c640bcac4ac2daf6fa051e71fd9e37cbcd9e92729993cb79eb093ba26f58510f10eff97586088fceb375e6ece09f48ac9cb0b41d228ef13c8488c8b0a32c19ebe56526665906f9a9acd00a8275f0f8bfb84733ea8b5f051899039c18f54a251021dcbc7f48aa472eca59e89afcda3b25673561e757a2f04b40ffb7a616c2b21b64b0b28d44e4a862e21af20e9b5b4dc43b0f16d06a9f7688f40f89d14258a40f88c7a72d619d8010bcaea27fcc274ef9058ee62820fa2a6e454b84794224d330d3cf98cb12845842f25f3a69b0853a2dc28f078d4ac44dd1bc3d40a92d82ce7ab07174e1df4dac82a5ac3c866b491698c1784db119b831a4477b9ff4daa3ce729cfcb905b6413ad44c53d8936c94988cebbb6d81ef3ad90b5aef7d1abffee61f2718cf140ea8b3373cc252c6e39c6548648f0d2381e4c015515e06943d90cb7b67f9da571f5960c4cdcdeb1c7bddb5b87b0e20cae9e47b1fe402d0daa49226508de945c8742ebc50c559ec8ffea458c7fb6a802dc5f56bdfdc1a9a6255a3ce5b4927b7679bbdc018353e2af702fcf6bf8381567c9a18d9a2839cb5b7864e1f57f486d681b5268f0b9c509eee4885c29d8247fe9d143050e8904414f683f0a58f1c96b39f1128fe0a8082c23483733e289676d6758991af61a382cf9dd8fbbdb9e8c2040f7072448b506bc7dcc09e2895859db3786362ca13a715c33412e6964619407dcc5f2e3e473125b09618ac4860d41e806a0b269c8ba2e69859c3ff2f1c0f8000d33a05870ee34272fd7b6ff6c5995c7292feab251240bb7bf13744594b123459d3e474abcf47ceb350d6339ccef8984015833524de3c26c29a3ba29cde99058302879b4056f11d20f528461af78c16942de864301c126ae46c4408b15433cf1abeba65f1af9e5ac3f35569b2b0be2e8f226d0afc4a3d92c87fbe12558c609e86ba5b81384da44d663b2c6b8772ccd6ac8df392a7b9d4ed682dd2dac1572bf3b90e0953dce6fc9dc7e0c757951b877a6768a9cf956356f963afe52e126e3c46c9491fabebc8bd598827fbbf04a338e0564a5a85418f4221cab3e5823ee6a23eedccd043e260f5105b762eb96e32dbc1c28444afcf4b35cc73b12e7a6aac2a7c4756720f40f666302acc7122895c3aa673a2fab453ee9bbcde6a79d045f0cef0074d61d5ac3806b63e8c8b0dd301f7daefd317fbf4861c5645fc11fb2c313703120f08a401efa1356e39094012bc5c007057d5bee72d5d47dfd4dd379b772511508824dc0155a703f53a12aac2f58e393c4e7fa4b5fcf83edd41694287ebeeddab444d5bf1c4fda9f963d41ab13341100a1daa97f1052ad7ea25d7405cfab6cd061c40a806eca956bfbbeb690fa936d853ba63b3a704080ef9ee5f72152a1a0df23a78bdbb0ac6c6539c003232c33df50745c20a0ac58c036f2355547538a529ff3b51e1daf82c10296766bbed1f5d733b0e38a8dee2d60682d3e7ed6b25c0e0908d43706906bd492697779c02a276ea3ffc090184e0b2ce37356b257c596e43c066d93e77a75a0fda1621653341e729fe34c9f8d2161073a5828fce79cd83b8f5b8cd4cc82378da09a490463fc1608da6e4e68adacf323f85354dfea381f7b2d975a3b13ea92e5f49b82864f9c1cc28c474cf0dec89331073348a7eec053326a4b6bf078a9030c58bd341fe2f04bd00686a2fd9bcc5e3730d71cdc11b3c700842866ab8dfc370dd9f1ae298ed3dea8b42fb974bee82def60529b456972a10ed7bf672a024690a8deadde49f0620fe321b92a88ec39e89ac6e72baeb644779ed011d5dd0e03ff311faee384d3579be43c9380039be2a6968e6950dc21cfe518728be92b20b446e1a0186fe8f9a1d011bd4a42b9c05848e60f2d32831fe4faeae7ef37fcebb6c9127b55366633ababdc0ff6131be8f39a9de79138674dacc23a26008bc468f058312bc08e05617a13c904dbdf4e4cf988f5d38c23c2220a992b1386fdaf465fabedba4d5235051f44d58bdec6da76902b0ac91208365d2ac5979e2b6f8d1dc4e9de6b042e033633319e8e0eb67700906994a892bb28ae19020f4f00e30b9d780058e5a570a586a83904909592cbcb826b2352bddb216c7eadf39ea85686edad7ed317b55b686aeae965fcd2f78dd3861332ccb17967fe798a07f027542016280730b9f5f90755d177e5a3d228de239f8e24ac67440d465278d2bf44704c1e25c01d08361695d5ca0b70d45c7631cfcc3604f66921aaa37db42d836a3dea1644150ab55adf3a0a6d14893a6f269de5ce2c94c205f830011878e5998bcbc5c67c01aec1f09ed73a1d3778f7ad9bcbd78f076a81943ca3094c2d1c809881e2ff89dc6582de5b0777e306ab4dd8a725c8e7ea9846fa62f255ea31cfad189beb53ebaa09b1552cc666e922afaa185e21e090a2e45b45050c84b34e60320ecf4d52059b13b4dfa75759e97b877cde08f6b17987e436cf071a196561d7d2ce3f7d8b74d8f79c1009475a7b6b44ce24bffe0e9b0ab864330715455e4388beed40fe46e8a7146926aa1d42d8dfc8c6b69265c826b8ac53295c38bbedc9910520da5dc95a97391170877ead919c2396da73830947c2d62724ff029c161c6203c89e0a8e86adfc7cf98f1a72c47199b2101f9616e4312152d5725392fe042183fe077898665dcbcaae6a0c9db39699ac2d285ac519c3c63cf57b3267572725f691bca3866ed080c400a753f2fa2e37ba348b5f15c0b32be68b2cd170a4810a491635110c405b9815f6106ec214918a783550691d949dfd4702378a1b8a3fca8ec65cfbe31f1513bf7db58e255c4329d93d6294d829feea0a8fc63b17f8107e6c670f415f89f8b698378bec4324d1fde15dfbd1db4f77dc8861a6a5f6d4eab71b9b5b2861a65525a2fbe57f4c4d59094549e04fb110f0b24920c272c8ec44e66ad901ebde2f2e9646e7efd1ccac9763951f1f1cf00c27d4c3f696de04271e285bcbb95111c979f962641c7fffb4946c9732e80825bac23449ece55883e5df5c404b8673e8b884ddacd479458f88f26eba98433ca965fa7b609103434dcb6a5602e7165dc83ea2ab96ce010439adb5ef81362c28d26b8365b9d7898abcc81e13d3f35133f2d86c99451c418244ec169c68b3527896b77352e67a1da8a99e4e30a03f082ad6525bf63f23fa613c332beadf91ca123c06b934f71655523012427ea044483a295bc74066045dba49aceb29a4c4459e9f1797a0f7a5bae07d2b96579779f1afae922a0b2336cb3c4f587c3cd32e46d4813a661a6eecbc76fe704176fd469f7d3c1e3254d625d94453294e6f49a70e4c06bd68aabbdb748952d0cdb7143a98e5c8a778220e9f32aa5912f5c6d1707b1a0f3ca376db16e2c7a36c124ec694308e90dda66fbb5498f0c6ee4a18b23fe0eac9aafdd18fe1442af6362d77a12d5156fc59481a2486acfccb7acf71b1df3d30449b43b0f4d79aeef21918a6416601dadc4b54af4fcbefd961d21695056d4036c5ffc4c45877ceead1439dca44d8378598cff983b900f0bb765e79c4c5fd8792d732ef9ca377964a1ca524aabf375d07c57c9ac439712b4ea92e82a5f03dab22a02b9733375069dd86a8a6d1c5934194292616f2ff080efba1fbb06b6148bba35ed7c5ffb9b2175f883ad4717a7e9133e834ef1a74759a58f33f4ff37cf28300dbe80b4891e4387045972b00d4d1054e8d28b75101ab014e291db38c683d77a9584906652b4c1b003746d1f55b447d31e53997718f4f23e4b410b30741a6203e9967441b339ce1ebd18c2b5a3241e5645ecf2e8b0b14ddc174d982b1d8de9b59121555901a4a49fd5e8a8d2ff69fdbf2443ea3eef089a2d3c8744636b69345d4e8b293fae7ccc193cc237b98199e44ec3370ab37ca36dd0b3a4c043b526edc2d7ac2a74ece39f898186632da01be2b6ed9b2bea76dfc59e263c67cac39ff3b122a0009138b3a3d5603c01cad5eba6997a4d2d906f5c156a84f2078f30a51f0ed979ce1c43c280b7afef8123d32754b541345f7298d1b2376c10cf9663b5abbffdfe80b64e528bbcc8e569fc3c37bcdccadecb0821e1ee80eb1d6624d0e4606184eca0cb88e21d9ead59f4b31620499f388ed33241e785a37832a380819feb4b9ccc9cea288c2ca7657b3a7f3786fa187a419fd4ada84119878a596da1179ab40a3e9bc097ff7056c3123058a1953b7af5396849f1baa29e78f5410899463384eb709f938f98a495236545c7a3a4da1c63e4a47702457dcf6a62b62411a38dafbbf1a7ba59da68dd15950f2542e97541c4ee846fd11f5a469cffa8bc88a5e97073dade47b5c5c90febba7fe3070ee37613334907dd474c5c84645789f7d4ce956f355d3b5955e176d8e1e15e4e8f433d0e04009a7dcf70b2d775e87c713eeadedb70ec5dad9106a12b09681314402059722cbd26d6cd54f83b3a9d851e80df9e6f9775d4efadc82815629a80c3b6fddcc80997d95cf4d52e520a984f0178589366adca8fd413ce42fab36a86559522ce1a6797fd89746903051d17674e25593ad45a9afea327736cb4d648bb379e67eeeefd945a32213968a95a823f760d15118c0ad78d68bb0a0bd5cf387cf93dd1c45e2c21095c81eb61c7924ea450df9ffa3c585d4580404c154edf99717f841063a3b54b0bebc78c5e44ffe33cb56b314a9da40be62d584743b07f729853fddb28114271e2aa7ae932fa528f38cb785ca1ca3d3d7256c6cc0038bb815bc3379e6597a4b24502ac787d0e758047702a5f0e76df7988f96e8d3fb2d20acf7c1b3bea4665d475da0a7471bde3440b7668d727ccb3105fe39dcb6e6e420f5f820b45337b497d965bc240660e271a3e872b5b88025b11da4e033cfb3f4993def493e9db23f1a2e039d4855621d53a3e9ee64393509de373fd1b67f5de31413a6ac00083fa168240e6039633c1304cfa9619ad55ea428d54b7030248cb0a33a1b0d0936d02ad5b0038e032bcf7de01c7848713e7fc6326c46fb92fff5840330ce69f63eb4501c31e786e322a089f74a5bc6ce700c9b93e79c935fe2401e6b3dd3101ab3df37723619502514dea0ed4ac8c09caca98a8b26dc4fb4ebaa3537016c4dd6d4f00f2c776eb06db136b9feb6d883708f0adc5cf061c282eb6f8e0441f2466646312c751e630b28805bd98494d55de6b6528b784d1177a76cab544933f7a7bfaef253cb44f2f552fa99d38e98cd8ff28f2e4ac8df4f3c9e657294721b823f65dd9570ff11830883438293c19a6f122f3c4f8b56e74b8c06e8cea76c4325e213c21e0f6a3e29dba904f087845d3810c52b1d1c14e5887cc603ef123f8f3481e52e0834fe81a0b6c667b59a880512b80c75abd5c2e62505c7224265e40c00e3e714a3d791cd198195c3a8db229966f2f6fe25b474a39f787514ffb9e85790a604ace5a1d78c03fca1dbdd0f66f319249f57c46a2a6f4c8def93326256ec5290d7da2398a745b44a5e0c097ecc86167657833e9ef2c85496aa7c56f941ab2f393c44417134b9d956c85acc33b80e8f05c2a684a92d4af8d84861659564197d17653640d2ba096c6e0dd35edbc93ef453b4c14e76ae611099511b5796596404acbfba5f6d2d7b2d244b6e3062572efb006238fec083f2eae4154944c0875b903a49b8c0aaa95be0d77e359737a59ddecab98d9a89b87cedabd4c0b3dd9b90ca622e86e24b9e62ca5179a5a92b03ac0949d5040c03136bdfc371d305fa36124e95e285f8e8c22e834a412969b11ecc36e6d57ec51df67779d4d5c26be530aeb1fd30ad0ea95d4d82eb16b895fcc8c23e88e82b71b2de52bfd20ef1a20920cb5489f655d610cfab4d5471b3cf33f4937594e95164a4fb3e3d4ca6686f961ea10a216b9821b53bc6469ee030844c470138570da1678bd150af419b485541f1b82095d52f3db5a615973bcfb98ac572412b843934a3a0e36e51be986dcd99737187655098936e14b62317533db211705303feeb40b35d19770be86c149eea22c03f7944cde15552f39f357e2cba8de837cde99376ab604a9451556f755657f125838a6083133299726d4d46b69dbe258778e155198a36a84554eceffc26497b74bb07d0f401f0326d21a0e08f3eb6b8029b99e51e057c26e5affad4392994a8414d8cb93252ed5a85c344886a6cc787008e2364907b4708d68c03affade919cb98f71c2fc55ca681dac018c9cb206f52d7301f971c6e1e976b9c9cbee4ba7abe30580667f7426b6a52958a7046ed24947869e00706d3e096fb1b196780cff9199bd9982c06511734b36aaa79df1adfc899a416d6364adb000de5f67bad07f71a023129aa5ee68ff21139749aa7ae0f35ff78cffbff4d61f264f54471727933cacd9c04f2b827f5c735d652379893dee133ba0d634b0b31b8bccdc38f9772de620ab8f7f8bea57c822ccb2f5db42426cc7ee48d4651ab4cb83b418fafd6122fdd64dac80553d160eaab8e7f02322ae4623dc6943aea1963bdbf62d4e59af238372f633b563e44f07572ce9e41a2716ada7fcf64f681bde0ce897aefd837c004803457e8ce9b01ca14e2dc85f491a40ebcfbe422cdc72e04b1cf42dff356fd6116aa5ac984ae83fb222a4b90fe3f26ae850f163e9c91f15e23cc3857ba2c65b067c2e9905767d5ea24e2c0c429549fec6afb1981f3ea035123d6c67ae5681b869fb48043469fea0e63d4ffa762e226e85b98047779ae8d15b1a25d74d13600f6a8576e60d904c9180a0ad81e65128ca9e8546225bc6c8622d559d8095047cb47bc5c82b21d209f9d6f541b2a73df5dd340b1368be83559842e6f1e2c78b0cf59e147d830d85d68d7ccdf44e3a365ec282c9d8f3978b7d1ceb42e9691ac7bdd01e564120f854de982b481fc06d2d07c56eae16e3bbe2912cb39dac59aff1c37a199092d7b907812cbf7706fd06efa58fea3de959b0dd0345d045de05b416e65b5cc1ef31325cdebcb7e3f069ea7c2a873c1405ed7d425d549613d575fd81f880442af3035c1ed5e872ef6dba90c826746891cadd52010fa21987bfe305282d88402016ff60d0aa854a1c6265087f475fcc61327381e907c207e2c56c659fee5658c11df383d6079a45cfe8dd825155c4c70a38879d53a9208fefa2d2fc778702b099e5acfbf0752da140bd465e48b857eb12b293059dd47c19a10616f19354cf1569933db327a3414fe5ea4e0177621dd0ae33e554c656c5648c7521342cba0b78c4d3d52656ce6d73f42c8fb5f2bc0dc12195f251b970e3623089f7201b3a32e8b3121cb345f3bb80ce242eec33375a2dd7647d662d654bf8bbba302bbeb8539f032bb892e350806fd0d99f777df6d1d4f9f6d865782397929ec8f250ece01bc4bb40c44f69f8b6a9130b3aea7e59c4ec352e08e43601b0daa34750a67e27bec716dc23951e890adf564cecc3d62ced981a307e53cf8ef70d8c93aaa31d816b0a262643a38999eb9745b0eadcd63075c325dc9e517f875519fe418b615b6c4de7bdbfd64b745e938519ca955afe956e4a6b19e430b0cf58a6001a73ba14098fa474b9f7e647696fe50db481cef38fc06d1f78c8e4eddfb956da2ecac91cd4cdb56febaf8eaf79e955fc2d217b23381fa6cd3f1de743e43347e64fc59e8834b5a862b0feada03757355c900775172a422fe338e0f1d8d3ae98dbcfdcab9b3555bd301683a8747fdccfd245d66d3eb9ed7d91764be86599e4556a83c741d79565c1c644f36560bf9043d5b650259436bc55db40e0e733c14d74177cb79440020f9b16ca79871a4384fd37856a756493c2f7c840b3c0e847f172535b3cb34de6866c22523f2948bb953a39f5fd39dd1006875754aa4f488919e6783f6b5257d4703f50eb945cbac82a6ba20936adb461ebe8033d12551ba0b8e57f9e0e5f5fe81d2c8b2034b0ee8c286cf93ed7e8964e33f34333ec3ba52d26bd107bec9267d97a2fbc3c4d6d819b99acea8bc6806c2a47ae549cd14953b4444733f09b9ced47260587ce4849b805b91c38a3f95ca4f9958c2e70254872404753f637d5c569f4d3051cb3d784cf9f74fce92dbfdf869d46a8814e36e4f556b16c5082d827202b4aa20dbf8617509b2cc3ba6cae9dac4012d7807180196b8d4a12ba530ea4a0d03f0739ae4a2561c7994fbaaa94d93fecb047500b8268cf23754a25897de3574d901bd3aaeb58e1dc3da0b48552c40579d8c299879d64c613a332c0beb9c864fc5412af45e2866fe8ddef86e308b4846c34b39fbc3ec8e3c8febf107a1a98356df853b72088cc58e7a59d9be640417d3425386ace9777632d7daa82319e041d059f5f567ad40d7d39333b661ee90ec52eaa9f50f9615d01d0bc72327d2d530ab1ce3272a2844caeac3fcbc8f1b01ddda7a1467552e53ed833d401c27b5d08bd9e8e3225868ca337428b6925d17720e906672308158759a7f4ff5424c0cc2db09948abfbadae02706fc52ab90395885e697c11c996b8e9d9268b15fcd465053e50e8328cac313972e18e69a74eafc250e8ee8a42ea853c886048d2dd09eaa8c1cd622f97881c8177182d9cca670bba7618281f8fa0fc74c5646116357001098092dfc8450f6cb29bc644574d38405cfe7bd354a1359065b42f0a5fc81c787e020c7bc8ae9e2b78647b7e6dbfd78e6ba882baf632abae36205939809bfceac87bd7ab012bc64db16c04ef5675e1fac8949139ec989cbf5577ced59d21e042cf0bbe71bc8fde9f8fa30a58f32f4011914c5bcbdec09407141b7d27d9ced4183e584339455cbe60da8c56aec9f3c6b164fc58e82780c0a4e5d0516f703a14f743e47017e083c2f72dafbabad9a91f43c5697163787a46044d8e38d33261c1c6bad36cf7054c04148ea8690f0edd616cf04370fb2dcddc0613f6d62385329e548fd0ae80ef59ed4efc3f83205edd0c9d5f5235b5faeec7b303daa4f145396ec8e601f316c1a9dc7e0ccc5feeb7f2bde8fde80c837c269b2a9e76584dbac73eb9d34df6b7410bf5644cdad01ce86c9459658ab9cb09cb2039471c18799fa45a7d04d1e3a49e2f7246fb7366f2a6f926f0d10454048b45a20bb3dd3c258ab5258e8d3d2dfeb8165954d3d12acbee1ccef10f39bbeb9a056b291bf9b52eed9b75be13fb0947026ebb299121dd4a01475e9be3728e84c30e30a8a6819f690e4b65e437a1bbba30887fc88e6c813afaa8ca95a9c327f0b540f20b77a47fdd453c71a77d6be0594c4db09dcdbd8cb9f7c62a5d64d6bdce9757390aefe9a1d38a296932092990f62819e79678a4dcd0d3cd13b479ece9b45615d75ec013c0058193f7bb117490b2c77493d44164e74ae66d81bf969e62716f666cf0e09d50356ab64b36732e8f43904477ee5f8360f5cc53a621ad0fcfcaf9d79ded141c579ec230480d999d8d3d78f7f36069b21feb89ba307715b21914dbae791e0131ee43585f6bed9e487261d27b4c3397d724219ec2e83906b1ff70df7307250cf50373f6d83f1f944218efcc74bc5bc629c80edae1058742c4b74ebc699ba471732c4fa5fa0aceddb6b319f4a5ff8ece74f9d8d1f6f1b494b1d9f6449d6fdf40749b789da493916d987b6d3b30a9ffdcfc6312c1875ca180345a4138454cc24ad20579e5c4336b407b321756d32e8abb66974e8310d597bd761fb38091859b48a9b27b6a63451d9d1fb544f02bbb44ab5113cf6bf3467e36d926f9d6d3d15f4cd694dbe98d2b1d037a76c92b318a38245f9fcc76cdc85e59b4adfc3b9bbc8ad00ee1fb4395644566b82016a56350abd5ce6675ad4765c27740d0dd34b5952de5895b02549f0e9b881ca55987adc4dff5c50fd054bf27a546b84ef38c7d93f3f8843adb4f9fd84ff3e97e3dadc4fc12f8d9feae3ab2a1958cc1c7e33d654425a822e310efaf7dfbb19937f033fb9b573a3137f96240734970df15a9feede45d5dd2be70f5555ac43c9d7ede621d7c6be7a4c746435eb13deb7f3bf4f3226b592487738762fe92f2ce4d89b0c03f04f3544ef5941f5f198a94d4d694f8d6409d17b4787f92ec35f4afb2bdc3fc308df712b82bf54656d12f77d9f890f9d818ac1e59a6a2bf3574aebb08b0b1dd5e2453f54bccde15ea327e57c3b4d89c8758f5cadd383d7d450f8c5399db1cc7750361f92e6f729aab4702f033e0fd58ea3a76f1fe773ee6dc964400216d6cc86e12823350f805109fab62c1643f0cb895ce0b6fb0fa4c50308118d66bf7f5010b1c080e1e3e37d6de6c8b04d6e7d468340d7e166cb05f39caf2662199340fa92325cf8bb82e1446c69e877f728229d0d566a39d74c5550accad410ee01742e966220547eac553239823bbda53fc3d4f11b4e0e919eb319536f99d7b037bcfa7e8cb4fdbdf611360255cd5f34cbfa09207aea47dca0100a6926d6b01acde3d1d11ae43498ecd233adf43457718930b6855f1c37c7ba16bff0d3c3706fe9657b542cda83d3a573fe6eba2dec40fd310a961fe8bce1fe112d84d176738350242e0167c2f236d5ff306403e85b0b48b5b09c1aecd5ccb296ebb3d9969e06e020626f9ef750a3d3e4c8fdd2c5ff5056be4d6732157392271194f42f1b525b4f81acabdad3b0fa1fb38dd3b8c1480619ba08e3ed46f08f07de75cde42664f7a533ce87c5862c08ae0a035b0b8b8d64e94b83858baf2c8d98f452dd3b5cbdc080507168d7063a8f2ed6cbeeaff58a91156e49324d3660880b10377d946104a5c467b89ca8f513b0af80fc979a307c50ec28875ddffbf55fe784f393450d74d5f9f8a275d45ee02ac29a67444c720b3cff61ecff2ec1d79bdd43c48b822dc7af3f0f39bcc47038e5902a1040505f0fc221935d4e63dd0159a6dd1e7178460e2326706fe58e7dfe6ab2f209f0754a0d46f54b238e9395243ab9db29dec16032ab3e9df554d2a8f9137cf19f112b839ad90f6b0b823ece194a233e0d0c3c3b63cd3d2bf73b9ae30554595dfdd3b4256e9c349d7d7b42417dfadc4e40c9bcb11ab6794444411793633cd379fd071b66b5aa4f1976bb8f857a28950e2517c48deb112a8a7e1fff0e1f0678f1040cb9e4069a781a445f8c4690f5047ccad2dabf890d90dd616d7ccd4ae3a672aed3adb2db649ff661331b600dc045218b36a4e965b3d15e858dfe61c9a63bd3c71dfaf3cbf9b3434fdfdc725f995d02b4de10aaec7b63262284173e2f761963e106f76ea0f0e1ae509795ceccfe4686f414bf2b8788edf76113d33f09ae0512aef2e057fb1946739386f3db3b7e0e8afc2b52f1ddeac47fa3028c5095f0b67d4d556c8837063d902197e6841ca4917218b0220d5af76c474e5b50b3040812e72bc9ec886c0de85fc0aeb336558bd9c1941ced8b3e2f81a728200c72fd9792df44027af81a5bbbc31851b5dbaad94110897bdae8e6eb73c12e0c511967437b6e7a06e9a148b365b3cc43f1373c46dbb6c1c0778c416f6a421801d2fd185676a81d5ad072e14c5b861bfe6da9b4500c4d2fdea0292a8e2903e5cec28e3b4fcdd1d67029dbdd176e1449ec41ca43bc30cc2b543ea4602488342fa91cb93c55da0c758a1719f18ae0a6f4473adb4be98f5ab2e45a5695938d37da7c64f9c44bac5c9f9f11a2c0d2e5d657e78838593babb83b3564092455c06564e700bb46a26049761eda93e0b0273d6bc68c0c66610bc7cd1bafe681e4c0348c28e828ce961dbf2d62eeaf29386ba59521aee30e55bfaa9c92fcecd8c9510616f9737afffc28fce295d5d75e75f1ffaba551da3324590c1304c8a5b5613b7326d0df0a646680409e543da2ca60a73a0cbcc87605a6cd1de81cefd9e9ff7c450cd9f1ecbf68d5a4c0704a4e278168925a5b04e273c3223ae670526d854128f9700d560da6b2279ecc015bc31dfb1f5d7f6a28609edd5da15adf8f4d7fbb7ca66604ebda0b8139cf36edcc0c8c3620b598d9cc97dcfcf8c5b29b25da883381fac9b301b83ab33e1d14d36e88f8a76be427bece19cb65daab1244bea849cf284a93ced011e3e047dac77a7b4df54ed0964bb18bc1cc59bc820c1575c4af5031a52b6e72eb2a9a8f099c1ebed572d20bbc424a8fec04f18b0bae4255f5db00245f255f228ace2a9e4a73ffff04280ff12af57977263fad85569a833f6a39b2109b9c9657fe49abccb2fd358825027bca5e86e8fbf6dbab455f84cc15c2b67e0f56cb73acda2f574a2a62a6f459d53512d9116726b859a7ded1ef4401cedbf3b6b067c13246948eec14d71ff77bd90af82f9f9b42a594f1fc5c0e2ce2504c813c95f3f4d2cda436e9ab147e02c7f7fa087a92e86543fd75104ab1078cf59a82b8eec41d1ab64010b52be8496fadefcd8c77e256ee6d896c8abde171ec4c1d755c64e330db0e96d7e802ae3ebd5b20f1457fc6bd4d6333763c01c12040b209d3e694830362261e27744d4ee6602f166fa71f3f37d53af0c6c05dba6fafddc3beb076546e6ed7dd52902be0f70607250c817eebb6a51744e0c513f99d73988a96a02137e3f4b34a77bfd415dbfecd5b8f16b8fcbf294cb3c3cabf2222ad9226b0c00e2bfa4de032dea521972901a7ec56a03b3977882c60e1637c3f4df229464e60200a2782ad8309b961e56a1aef3502835f69234d47fa73137145fdb297562a30d68ca0b667621901cec95b3f49d0bbcbb6e79d70841b88fe67e625fa51f570440c6f62edca911330b5f06128269e4d045680a44f7112ddde999746be406171198e9e497fa448c34e37744ecf6db6465c0b7d9fb186632ab190a85185019a6d8c2ca0cf8dc8215d67869a8b8c3f230cfb215cdd94ca32738f86279fdfab227b7b9244ba291333679dd3f8739f61434ade783a3a8085e3ea7e0d70fb14898a45e1b8948df80387d8c1d1f262428e3204b439cd087595a9ee003aabeda7dfc68300f320b3095c6c03c38218257f055c47a6d4798441f5c19e6f7fcc1469b134e3e9b183a91f969c6196d806af20537832ca8cb3319ec0a3ebf2fea2e39ef2497fc24c2e9573cdc41a21b4ece69924051a95f1bfe2e8e673e6c59778f3e0af27de960a77dec3b90220d47c05ebdbd6969e235c5a457b387fe92d54234a97ac8793305ef9aa485c84de1035e67e88d2e3f2832e7aefcf9ca294ddc96a09e439e2d65e18415265778bf84b560a8897a05455444c5b0cfa09fa97fdc9b6125ebe313c9459730a55328b7c9fd5f27ec604b8207501c739bcf962de0749b5df38ce7726f41cdef37dc79d7a5fe1c13f85a79a163eb3cd4ee3cb27a010af169b5218a3bb49e0360100d5fc9dd27d9a2f6fc15b3e035be16594487d29f0465e2c2f825df3cbc5fdc1b5677c0e1ef490a4125e2e2d054cf0dff66f3300ae0f446b0916a6c4b46e401931ae1dbe87684cc23a7ab8c31cb17e761800e3c4f502032c7dcf7f13ff831129d5606faa9982fc839bb2101a26b19e2d82bd15aa0bd415c9c7286198a664a983662c4c71ee63a9a385c56cbb53cc1aa2e852ffb85cd9d882a5f86d5232765ebd323d6780cb68b3e1d557b5f66bdcbe287758c27c16871e7d8aeabdb707aa3fcd2e1e06f842d17231fee4b779c3bb5831b94efb0ec4b2e45bf9f11e3633dac5727a11eefc48a8cc331d4bfc0302effe19535234333ac02b96766b14c4f31879643b930def012ccbae6db346a3811ede5883b9641d0a9494df1a0d4020fa21a20010d3135511b95bc8986032423af19860006b5e7c953a9297f003515f451a52a48e4bb21ad4bea4e1ae2e226c247f2c61541c0e31a600e14aa84ae70c472e4e3e9c1399a758054af76a2c8146907da82e875e5d10d0f23b9494759b4f8c2f03c2085d2bfb75a3d03aceaeac9b0d37ae01ef95823224d9dbcd0b6003444830382c069f08026bd5e4941ca9025bf9be57adb71d9cc6313b4550db57d736d3f0dd8404540b6e0564d18ad25f5d0acaa1812fff3d2b11f4f21283f4e45085f20279928b95caaa2cafd819bf52d702fc9fb7b9dcf9eda11205d98bc3b3f0a81c90afcf97d26e1f0cbbcd29674c14e3e3050cab0063f07c1db8577a8105640d4be2c1cbe4a80984707cb175a9394cecff2038b57127ec881799937751826d901e3f82e90f06e29b1ca5d1554b5748defc79538580fced1cc0b68641203296326b5b7a627ce4e9bf01489e9ad2483b28abc7f3bb335afd0a18af0c6b2c6b32b69a4a0c08796fcaf59693329c1f1a33ac20a126a48d9922493048948f9602f7b48c15f12a94c3db6d3d1a6f45e5f7714113b94d8533c5bcdb63be992d5df0845dede1f2f353bd7dfafc5bed6e21d11b71bc691f489fdc0b27a0c02737b0bd4dbcc7976be5b5582422c75be93d5ca2ed5238b90146aa7be91a5e14860b1f115c343c3996e6ed6baa845b20892a1d7ef0aa902edd867eaa2000e0dcbdcab12403bdd9cc0ca11d278072c5134ed19b5cb89ba61cbd56eed0ce379693e42aa81076eb0817c59c49464f771bcf6ed3b8c27ded1afc263ef6adaaef178857254f50bef913ecf1c73f84bf79e8f2ef72feea28448f1291dbb7fcb4237238780b1b0db71123ce321483e2a2e348d6483f502c8dbe75542cd0bfb98f283d225bfd376961668b9dd5858abf07308422dbeddd0cc56df20da61d6358618f58e743acfa378450b635871af4b552181f8548ecba5be6868e8537335fdf9097465ca953cd974a09626ab56cca879c98744953bdcc13dc535a7ef622de2590e2de34ae97345a8b9499dcf015d40822c06473cc3d262f47a78754a0ff52c3210ce05a0138f35b1736a1ad78055e311c8cb8efd2e6f3a7f874061f6b0d70f53119f9e13f5994039162056dcc3c3c707cfee8e710f48612571165c039383bbba338c98fd7d63d1c93fe99d737992adbf7440586b29237dfee766db8cc56d9f4cc9f072be72cff08b2fc9ff448c8740fcdc014d3c629f8e37b23db45a52cfe121fdf000d22dd20e7fe273e02b31927cc4b5f4a101e81d4f2b759dbca2772e00b8cefbe7e7f7e946bcbf763186a3f7ca4bb4394e0d89f40b558b33ab5cb5925bbfaec855bb6ed99938ceebaa0bbc6d6d2ad9ca74c956d19fe86d7ccce7bea8a18a1376f7d972ea420d37e816a03b4d2e6b6e259ee80fbaabbf2e9df8e5261564e745891e51d618650949d8930f75528af4b6e21b871ed2dcf878ff5b64a1c20f77cce47598f1a95582028dbff4aba62f9b955e65bd7601639cce12f9eba39a43ee5df71dd5458d933d72ac70e7f13a3417752e94d39d1f179964b6b23cb315e343027f3f2d609181fc53522b45f4ffde65daf6cf351fe48e514c2edcb91b611356b41a75384276ff9766612e8f587d8d16e64333db5314e9783bd633247f13b0db3fc36a19cd0ac329715449fe7154101503f846bff984e1b878b27256ea8c0fc1338fe8dc58c7fa96691712542de88b993154a11ad97bdf492954667adf4a1551dfeff62f9105329460377401cdbbc2fb2ddb469cd42dca415fb9ee0010a1816b4c0704fb5bfd549d9a21b0ffb3fd45551bd84cbf2a8eaedbb8f1e1217bbd4434e7de275c039d1f883300162168a38156c671fbe68a650be2f4daf237b433b9d1d93279984c72dd1ecdf7eb5029d17b40db0151f6964fa2c23b21e2e910edf660180db9e247088060524d3d62aa67828dc5e2e3da233684179fa83fb18adf9d4fb33a66506b9ef3d75b16236f60bee097b43eb1c36acfe1bbd13a82267cfea1c2008cf63c08011951e39d94e8f88a774571e8833e93f5364e4cacd3f77c6ad6b15ae81d8ed9ce3d6badb86ab17667b980a56d2787b15c0de2f739549f7b6446f63eb07668d5eabba2db790d3d9b12c54253684128f3cb0700826a4921972982f720d4069991029d1b9ccebb30a82e5e9582f68aa4b75ce237743a3858223d5f0e9ba90c20ef93fa6e21498abefb454559b0a0bd3ac1109462aa6dbf998da9d2678d1796fdeaeb011745adff31ed8bf4d760ada229c19b2a7070d451f49a6d3257bb50d552df0cc0db43c49cf256852aaea5dd41b5c7ce4729414f1688029595288a7a43c3b564b658b096160c5617af236f2efb121e089dc45ffe7683553cb886358195b4173c684d6f8543729a23f61885db50ca04f18fa75c4268cea9c44f1d360e4bdba334862815db22a31e2b0da6e3c0ce23b7d6f8488cf9b8ebd7cdedeace134e8e52b298f4e621047ddc1fa9e4f82a3b9d223315e63738cf5c9b769f9a134b4dc0dc0eff0d3ad269fafd4f66b376f97eca0b18dd10ac2d783267d6fb4eb80bcacf24830ca3a080181b0877018ef6343a122714f72af3abe2ec0fb1adcecc8a4ba3dd5e38bdf79ef497d467a898e5476c44ec992479f4778bf9df36831010753e59b1b4edf622ca0fed76408cc576c8ee2801da1dab0b8c0fcd0787d5ce19003297d07c476aac82a8e107dea7db7c87e3bc459ff95514732ba8d6121d57e5e5adb745bbfdef77f3c2043415838b82d2ee83b2ecb68a84fa19f423d5426d5bc366fa2a3be4d47ad4cde9aa5fc7b243d46e9c968e075abe2e4e5b60094297f7df1d5a5bf965d43e6f0ae80a6dff9c2c9d7def66e3f387aa760c5f7e6336c90964ca249bbf513f610613930baefbbac09c7beb5c09c1a1f212ce3ecb4450cbda21a0d1860facaba79a6cdbee325747cdd2a15dffe4482c7def99cb73cf13cefb9af27353e13fb43e6ed65cbb0103cf69f0cb11c02c001114f5aec107aa6fded68af2ec08e83329569c7fa6894c908d044de8d37a8343d056403997168bea931188ec8a4e40fabc085ddc92bd0e57574043eab9e6315ad8e6fc8c1e2671936521b0e0a4c8ae485ab6982a3383451c2424b09698f2f91adfedacaf23aca564b2e9781c9e322c369662bc7568867c7b8129461532805c5222a582bdcd469c20432cf1bf32e8c48e15d83889a0514a3211642272834aaa15d68d8738395d3801d7f24a1f9bc6c69d8eb18fdd4bb72e45d42179f1fa34be8b694a86ecf3cf171bb9f30c3df92ea6163ba411c6b7e075b233cd366b5bf86c2786fc720c7d99909e426efeddad92a7ed5bec163cc1d05d8df9b6b49a7a22b3b46efcba508d3343fb5bd8406e73</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六次OJ</title>
      <link href="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/"/>
      <url>/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/</url>
      
        <content type="html"><![CDATA[<h2 id="A-最大内切球"><a href="#A-最大内切球" class="headerlink" title="A. 最大内切球"></a>A. 最大内切球</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><strong>题目描述</strong></p><p>在三维空间中，线性方程$ax+by+cz\leq d$ 构成一个“半空间”。</p><p>现在给出 $n$ 个这样的线性方程，第 $i$ 个线性方程用$(a_i,b_i,c_i,d_i)$表示.</p><p>求在这 $n$ 个线性方程与限制$\{x\geq 0,y\geq 0, z\geq 0\}$构成的”半空间交“中，内切球的最大半径是多少。</p><p>若这个“半空间交”为空（即上述线性方程组无解），则输出4位小数0.0000。</p><p>如果这个球的半径可以为无穷大，则输出”Infinity”，否则输出一个4位小数，表示最大内切球的半径。<br><span id="more"></span></p><p><strong>输入格式</strong></p><p>第一行一个正整数 $T$，表示测试组数。</p><p>每组测试中，第一行输入一个正整数 $n$，表示线性方程的个数，接下来 $n$​ 行，每行4个整数$a,b,c,d$，表示线性方程$ax+by+cz\leq d$.</p><p>保证对每一组线性方程, $a,b,c$​ 不同时为0。</p><p><strong>输出格式</strong></p><p>共 $T$ 行，每行输出一个保留4位小数的答案，或者$Infinity$。</p><p><strong>样例</strong></p><p><strong>样例输入 1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">-2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>样例输出 1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.5000</span></span><br><span class="line"><span class="number">0.2113</span></span><br><span class="line"><span class="number">0.5901</span></span><br><span class="line"><span class="number">0.5000</span></span><br><span class="line">Infinity</span><br></pre></td></tr></table></figure><p><strong>数据范围与提示</strong></p><p>保证$1\leq T \leq 150, 1\leq n \leq 100, -100\leq a,b,c,d \leq 100, \sum n \leq 2500$。</p><p>保证对于所有答案不为”Infinity“的答案，答案都$\leq 10^9$。</p><p>良心的助教提供了单纯形的模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m个约束，n个变量</span></span><br><span class="line"><span class="comment">// 第i个约束，sum(a[i][j]*x[j])+a[i][0]&gt;=0</span></span><br><span class="line"><span class="comment">// solve函数返回约束是否有解</span></span><br><span class="line"><span class="comment">// 若有解，则使得目标函数 sum(a[0][j]*x[j]) 最大化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,b) for (int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,n) FOR(i,1,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP_0N(i,n) FOR(i,0,n)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 505</span></span><br><span class="line">ld a[<span class="number">1010</span>][<span class="number">10</span>], b[<span class="number">1010</span>][<span class="number">10</span>];</span><br><span class="line">ld x[<span class="number">1050</span>]; </span><br><span class="line"><span class="keyword">int</span> n,m,id[N],tp[N],nn;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> ld inf=<span class="number">1e12</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pivot</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(id[r+n],id[c]);</span><br><span class="line">    ld t=-a[r][c];</span><br><span class="line">    a[r][c]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">REP_0N</span>(i,n) a[r][i]/=t;</span><br><span class="line">    <span class="built_in">REP_0N</span>(i,m)</span><br><span class="line">    <span class="keyword">if</span> (a[i][c]&amp;&amp;r!=i) &#123;</span><br><span class="line">        t=a[i][c];</span><br><span class="line">        a[i][c]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">REP_0N</span>(j,n) a[i][j]+=t*a[r][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ld t;</span><br><span class="line">    <span class="built_in">REP</span>(i,n) id[i]=i;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; ld w=-eps;</span><br><span class="line">        <span class="built_in">REP</span>(k,m) <span class="keyword">if</span> (a[k][<span class="number">0</span>]&lt;w) w=a[i=k][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!i) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">REP</span>(k,n) <span class="keyword">if</span> (a[i][k]&gt;eps) &#123;j=k; <span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!j) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">pivot</span>(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; ld w=eps;</span><br><span class="line">        <span class="built_in">REP</span>(k,n) <span class="keyword">if</span> (a[<span class="number">0</span>][k]&gt;w) w=a[<span class="number">0</span>][j=k];</span><br><span class="line">        <span class="keyword">if</span> (!j) <span class="keyword">break</span>;</span><br><span class="line">        w=inf;</span><br><span class="line">        <span class="built_in">REP</span>(k,m) <span class="keyword">if</span> (a[k][j]&lt;-eps&amp;&amp;(t=-a[k][<span class="number">0</span>]/a[k][j])&lt;w) w=t,i=k;</span><br><span class="line">        <span class="keyword">if</span> (!i) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">pivot</span>(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FOR</span>(i,n+<span class="number">1</span>,n+m) tp[id[i]]=i-n;</span><br><span class="line">    <span class="built_in">REP</span>(i,n) x[i]=tp[i]?a[tp[i]][<span class="number">0</span>]:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>假设输入给定的 n 个方程形式为：</p><p>$\begin{cases} a[1, 1] x+ a[1, 2]y + a[1, 3]z\leq a[1, 0]\\a[2, 1] x+ a[2, 2]y + a[2, 3]z\leq a[2, 0] \\\dots \\ \end{cases}$​</p><p>根据给出的==单纯形模板的要求==：</p><p>我们需要将$a[i][j],\ 1\leq j\leq3$取为相反数，记作$b[i][j]$​，那么方程变为</p><p>$\begin{cases} b[1, 1] x+ b[1, 2] y+ b[1, 3]z + a[1, 0]\geq 0\\b[2, 1] x+ b[2, 2]y + b[2, 3]z+ a[2, 0]\geq 0 \\\dots \\ \end{cases}$​​</p><p>这样子就可以直接使用单纯形模板了。</p><p>假定现在的半径为 $radius$​​，设半空间内的某点$(x, y, z)$​​， 根据点到平面的距离公式，我们有：<br>${|ax + by + cz - d|\over\sqrt{a^2 + b^2+c^2} }\geq radius$​</p><p>由于给定条件下$ax + by + cz\leq d$​, 化简之后：</p><p>$-ax -by-cz + d - \sqrt{a^2 + b^2+c^2}\times radius\geq0, \ (1)$​​</p><p>想要知道这个半径所形成的球能否放到我们约束的“半空间”，只需要在原来n个方程的基础上加上 (1) 所形成的 n 个新的约束方程</p><p> ,当然还要注意题目的要求：$x, y, z\geq 0$,根据半径要求：</p><p>$x, y, z\geq radius$</p><p>因此所形成的$2\times n + 3$个限制方程如下：</p><p>$\begin{cases} b[1, 1] x+ b[1, 2] y+ b[1, 3]z + a[1, 0]\geq 0\\b[2, 1] x+ b[2, 2]y + b[2, 3]z+ a[2, 0]\geq 0 \\\dots \\b[n, 1]x +b[n, 2]y + b[n, 3]z+a[n, 0]\geq0\\前n个方程\\b[1,1]x+b[1,2]y+b[1, 3]z+a[1,0]-\sqrt{b_{1,1}^2+b_{1,2}^2+b_{1,3}^2}\times radius\geq0 \\\dots \\由于半径引入的n个方程\\x-radius\geq0\\y-radius\geq0\\z-radius\geq0\end{cases}$</p><p>然后调用单纯形算法就可以判定radius是否合理。==利用这个判定的性质，二分是适合这道题的解法。==</p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m个约束，n个变量</span></span><br><span class="line"><span class="comment">// 第i个约束，sum(a[i][j]*x[j])+a[i][0]&gt;=0</span></span><br><span class="line"><span class="comment">// solve函数返回约束是否有解</span></span><br><span class="line"><span class="comment">// 若有解，则使得目标函数 sum(a[0][j]*x[j]) 最大化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,b) for (int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,n) FOR(i,1,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP_0N(i,n) FOR(i,0,n)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 505</span></span><br><span class="line">ld a[<span class="number">1010</span>][<span class="number">10</span>], b[<span class="number">1010</span>][<span class="number">10</span>];</span><br><span class="line">ld x[<span class="number">1050</span>]; </span><br><span class="line"><span class="keyword">int</span> n,m,id[N],tp[N],nn;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> ld inf=<span class="number">1e12</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pivot</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(id[r+n],id[c]);</span><br><span class="line">    ld t=-a[r][c];</span><br><span class="line">    a[r][c]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">REP_0N</span>(i,n) a[r][i]/=t;</span><br><span class="line">    <span class="built_in">REP_0N</span>(i,m)</span><br><span class="line">    <span class="keyword">if</span> (a[i][c]&amp;&amp;r!=i) &#123;</span><br><span class="line">        t=a[i][c];</span><br><span class="line">        a[i][c]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">REP_0N</span>(j,n) a[i][j]+=t*a[r][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ld t;</span><br><span class="line">    <span class="built_in">REP</span>(i,n) id[i]=i;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; ld w=-eps;</span><br><span class="line">        <span class="built_in">REP</span>(k,m) <span class="keyword">if</span> (a[k][<span class="number">0</span>]&lt;w) w=a[i=k][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!i) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">REP</span>(k,n) <span class="keyword">if</span> (a[i][k]&gt;eps) &#123;j=k; <span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!j) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">pivot</span>(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; ld w=eps;</span><br><span class="line">        <span class="built_in">REP</span>(k,n) <span class="keyword">if</span> (a[<span class="number">0</span>][k]&gt;w) w=a[<span class="number">0</span>][j=k];</span><br><span class="line">        <span class="keyword">if</span> (!j) <span class="keyword">break</span>;</span><br><span class="line">        w=inf;</span><br><span class="line">        <span class="built_in">REP</span>(k,m) <span class="keyword">if</span> (a[k][j]&lt;-eps&amp;&amp;(t=-a[k][<span class="number">0</span>]/a[k][j])&lt;w) w=t,i=k;</span><br><span class="line">        <span class="keyword">if</span> (!i) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">pivot</span>(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FOR</span>(i,n+<span class="number">1</span>,n+m) tp[id[i]]=i-n;</span><br><span class="line">    <span class="built_in">REP</span>(i,n) x[i]=tp[i]?a[tp[i]][<span class="number">0</span>]:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ld radius, <span class="keyword">int</span> temp_m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">3</span>; k++)a[i + m][k] = a[i][k];<span class="comment">//新设立的 m 个方程的系数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//新设立的 m 个方程的常数d - radius * sqrt(a^2 + b^2 + c^2)</span></span><br><span class="line">        a[i + m][<span class="number">0</span>] = a[i][<span class="number">0</span>] - <span class="built_in">sqrt</span>(a[i][<span class="number">1</span>]*a[i][<span class="number">1</span>] + a[i][<span class="number">2</span>]*a[i][<span class="number">2</span>] + a[i][<span class="number">3</span>]*a[i][<span class="number">3</span>])*radius;</span><br><span class="line">    &#125;</span><br><span class="line">    m += temp_m;<span class="comment">//增加了 temp_m + 3个方程 </span></span><br><span class="line">    a[++m][<span class="number">1</span>] = <span class="number">1</span>, a[m][<span class="number">2</span>] = <span class="number">0</span>, a[m][<span class="number">3</span>] = <span class="number">0</span>, a[m][<span class="number">0</span>] = -radius;</span><br><span class="line">    a[++m][<span class="number">1</span>] = <span class="number">0</span>, a[m][<span class="number">2</span>] = <span class="number">1</span>, a[m][<span class="number">3</span>] = <span class="number">0</span>, a[m][<span class="number">0</span>] = -radius;</span><br><span class="line">    a[++m][<span class="number">1</span>] = <span class="number">0</span>, a[m][<span class="number">2</span>] = <span class="number">0</span>, a[m][<span class="number">3</span>] = <span class="number">1</span>, a[m][<span class="number">0</span>] = -radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">solve</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        n = <span class="number">3</span>;<span class="comment">//只有三个变量x, y, z</span></span><br><span class="line">        <span class="comment">//输入m个原始约束，并将系数取相反数, b数组用来临时存储a的数据，因为后续单纯形算法可能会改变 a 的部分值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m; i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][<span class="number">1</span>]&gt;&gt;a[i][<span class="number">2</span>]&gt;&gt;a[i][<span class="number">3</span>]&gt;&gt;a[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">3</span>; k++)a[i][k] = b[i][k]= -a[i][k];</span><br><span class="line">            b[i][<span class="number">0</span>] = a[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预处理进行判断：半空间是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">solve</span>())&#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;0.0000\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line">        ld left = <span class="number">0</span>, right = inf;</span><br><span class="line">        <span class="keyword">int</span> temp_m = m;<span class="comment">//临时存储 m 的值,因为二分每一次check都会修改new_m = old_m*2 + 3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(right - left &gt; eps)&#123;</span><br><span class="line">            ld medi_radius = (left + right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(medi_radius, temp_m))left = medi_radius;</span><br><span class="line">            <span class="keyword">else</span> right = medi_radius;</span><br><span class="line"></span><br><span class="line">            m -= temp_m + <span class="number">3</span>;<span class="comment">//恢复 m 的值</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//恢复数组a的值，因为单纯形算法可能影响原先数据</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">                a[i][k] = b[i][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left &gt; eps + <span class="number">1e9</span>)cout&lt;&lt;<span class="string">&quot;Infinity&quot;</span>&lt;&lt;endl;<span class="comment">//半空间不是有限空间（此时left = right = inf = 1e12）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.4Lf\n&quot;</span>,left); <span class="comment">//有限解,注意long double的输出方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-文理分科"><a href="#B-文理分科" class="headerlink" title="B. 文理分科"></a>B. 文理分科</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p><strong>题目描述</strong></p><p>在高中时候，yjher所在的班级要进行文理分科。他的班级可以用一个 $n\times m$ 的矩阵进行描述，每个格子代表一个同学的座位。每位同学必须从文科和理科中选择一科。同学们在选择科目的时候会获得一个满意值。满意值按如下的方式得到：</p><p>如果第 i 行第 j 列的同学选择了文科，则他将获得$art_{i,j}$的满意值，如果选择理科，将得到$science_{i,j}$ 的满意值。</p><p>如果第 i 行第 j 列的同学选择了文科，并且他相邻（两个格子相邻当且仅当它们拥有一条相同的边）的同学全部选择了文科，则他会更开心，所以会增加 $same_art_{i,j}$的满意值。</p><p>如果第 i 行第 j 列的同学选择了理科，并且他相邻的同学全部选择了理科，则增加$same_science_{i,j}$的满意值。</p><p>yjher想知道，大家应该如何选择，才能使所有人的满意值之和最大。请告诉他这个最大值。</p><p><strong>输入格式</strong></p><p>输入第一行为两个正整数 n,m。</p><p>接下来 n 行 m 整数，第 i 行第 j 个整数表示$art_{i,j}$</p><p>接下来 n 行 m个整数，第 i 行第 j 个整数表示$science_{i,j}$</p><p>接下来 n 行 m整数，第 i 行第 j 个整数表示$same_{-}art_{i,j}$</p><p>接下来 n 行 m 个整数，第 i 行第 j 个整数表示$same_{-}science_{i,j}$</p><p><strong>输出格式</strong></p><p>输出为一个整数，表示最大的满意值之和。</p><p><strong>样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">13 </span><span class="number">2</span> <span class="number">4</span> <span class="number">13</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">13</span> <span class="number">8</span> <span class="number">12</span></span><br><span class="line"><span class="symbol">18 </span><span class="number">17</span> <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">13</span> <span class="number">15</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">3</span> <span class="number">8</span> <span class="number">11</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">18</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>数据范围与提示</strong></p><p>$n,m\leq 100$,读入数据均$\geq 0,\leq 500$</p><p>1 表示选择文科，0 表示选择理科，样例方案如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">152</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p><strong>解法：网络流</strong></p><p>现在先不考虑由于临近的同学选择相同的科目而带来的收益。<br>建立如下网络图：<img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211019203309059.png" alt></p><p>对这个网络调用最大流算法，根据<strong>最小割最大流定理</strong>，这样子求出来的==满意值总和实际上是最小值， 割掉的边实际上是不选的科目==。</p><p>所求满意值最大值为$\sum (art_{i,j}+science_{i, j}) - max_{-}flow$​</p><p><code>----------------------------------------------------------------------------------------------</code></p><p>现考虑由于临近同学选科情况带来的满意值：</p><p>新加入5号点和9号点作为1号的虚拟节点。5 与1,2,3,4的之间边的容量为 $inf$​​ .</p><p>1, 2, 3,4与9之间边的容量为 $inf$<br><img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211020093816755.png" alt><br>具体分析由于邻近选科情况的满意值：</p><p>假如1号同学==最后选择了文科==，那么根据前面的分析，这里<strong>割掉的边应该是$1\longrightarrow T$</strong>​​</p><ul><li><p>如果与之相邻的2, 3, 4 同学最后选择的也是文科，那么$2, 3,4 \longrightarrow T$​的边均被割断， $S\longrightarrow 5$​不可能被割断（采用反证法：$cut(L, R)， S\in L, T\in R, \ $​如果s -&gt; 5被割断了，那么$5\in R$​, 而$1, 2, 3,4 \in L$​, $cut(L, R) = inf$​, 意味着容量为 inf 的边被割断了，这显然不行)，所以$maxflow$​不包括$same_{-}art_{1, 1}$​​</p><p>最后用$\sum (art_{i,j}+science_{i, j} +same_{-}art_{i,j}  +same_{-}sci_{i, j}) - max_{-}flow$​​​​ 时==没有减去$S\longrightarrow 5$​​​​​的边权==，最大满意值也就将1, 2, 3 , 4选择文科时 ,1 号同学所带来的附加满意值计算在内了。 </p><p>按照这个分析，这个时候$9\longrightarrow T$是应该被割掉的边，因为此时 1 并未与邻近的2, 3, 4一起选择理科。那事实是否如此？</p><p>确实如此，记$cut(L, R)， S\in L, T\in R$​, 那么 9 号要么在L，要么在R。</p><p>假设$9\in R$​​​, 因为$1,2, 3,4 \in L$​, 此时$cut(L, R) = inf$​​​​，因为该cut割掉了2, 3, 4与 9 的容量为 inf 的边，这与容量为 inf 的边无法割断矛盾， 因此符合事实。 所以$9\in L$​, 所以$9\longrightarrow T$​被割断。</p></li><li><p>如果2， 3， 4未必都选文科，根据以上分析，$S\longrightarrow 5$​的边和$9\longrightarrow T$​​都会被割断。</p><p>证明：（反证），不妨设 4 号最终选择了理科，那么$4\longrightarrow T$没有被割断（==割掉的边实际上是不选的科目==），这时如果$S\longrightarrow 5$没有被割断，那么增广路径$S\longrightarrow 5\longrightarrow 4 \longrightarrow T$存在，与最大流终止条件矛盾，9号类似。</p></li></ul><p><code>---------------------------------------------------------------------------------</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max_edge_num = <span class="number">400000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max_point_num = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> S = <span class="number">0</span>, T;</span><br><span class="line"><span class="keyword">int</span> tot_point_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快读</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123; <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123; X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">return</span> X*w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式前向星建图</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, capacity;</span><br><span class="line">&#125;edges[Max_edge_num];</span><br><span class="line"><span class="keyword">int</span> total_edge_num = <span class="number">0</span>;<span class="comment">//总的点数</span></span><br><span class="line"><span class="keyword">int</span> head[Max_point_num];</span><br><span class="line"><span class="comment">//分析边数数目：原图的点最多有100*100个，与S和T形成20000条边，新点至多有20000个，每一个新点至多6条边，至多120000条边</span></span><br><span class="line"><span class="comment">//这样子至多有：140000*2（注意双向加边）条边，有约30000个点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给每一个二维的点赋唯一的编号</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建图加边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">    edges[total_edge_num].to = end;</span><br><span class="line">    edges[total_edge_num].next = head[start];</span><br><span class="line">    edges[total_edge_num].capacity = capacity;</span><br><span class="line">    head[start] = total_edge_num;</span><br><span class="line">    ++total_edge_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ISAP模块</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">int</span> d[Max_point_num],  cur_edge[Max_point_num], numd[Max_point_num], pre[Max_point_num];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ISAP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//三个数组初始化 </span></span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d); </span><br><span class="line"><span class="built_in">memset</span>(numd, <span class="number">0</span>, <span class="keyword">sizeof</span> numd);</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tot_point_num; i++)cur_edge[i] = head[i];<span class="comment">//初始化当前弧（当前边）数组 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numd[<span class="number">0</span>] = tot_point_num; </span><br><span class="line"><span class="keyword">int</span> max_flow = <span class="number">0</span>;<span class="comment">//存储最大流 </span></span><br><span class="line"><span class="keyword">int</span> u = S;</span><br><span class="line"><span class="keyword">while</span>(d[S] &lt; tot_point_num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> neck, i; </span><br><span class="line"><span class="comment">//找到增广路径 </span></span><br><span class="line"><span class="keyword">if</span>(u == T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> min_flow = inf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据（*）寻找增广路径 </span></span><br><span class="line"><span class="keyword">for</span>(i = S; i != T; i = edges[cur_edge[i]].to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(min_flow &gt; edges[cur_edge[i]].capacity)</span><br><span class="line">&#123;</span><br><span class="line">min_flow = edges[cur_edge[i]].capacity;</span><br><span class="line">neck = i;<span class="comment">//找到瓶颈节点  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改增广路径上各边的容量:正向边减min_flow，反向边加min_flow </span></span><br><span class="line"><span class="keyword">for</span>(i = S; i != T; i = edges[cur_edge[i]].to)</span><br><span class="line">&#123;</span><br><span class="line">edges[cur_edge[i]].capacity -= min_flow;</span><br><span class="line">edges[cur_edge[i] ^ <span class="number">1</span>].capacity += min_flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max_flow += min_flow;</span><br><span class="line"><span class="comment">//cout&lt;&lt;max_flow&lt;&lt;endl;</span></span><br><span class="line">u = neck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从瓶颈点继续寻找增广路 </span></span><br><span class="line"><span class="keyword">for</span>(i = cur_edge[u]; i != <span class="number">-1</span>; i = edges[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(edges[i].capacity &gt; <span class="number">0</span> &amp;&amp; d[u] == d[edges[i].to] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到可行出点 </span></span><br><span class="line">cur_edge[u] = i;</span><br><span class="line">pre[edges[i].to] = u;</span><br><span class="line">u = edges[i].to;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">-1</span>)<span class="comment">//找不到下一个点了</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">numd[d[u]]--; </span><br><span class="line"><span class="keyword">if</span>(numd[d[u]] == <span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//算法终止</span></span><br><span class="line"></span><br><span class="line">cur_edge[u] = head[u];<span class="comment">//从头再来</span></span><br><span class="line"><span class="keyword">int</span> h = tot_point_num - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edges[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(edges[i].capacity &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">h = <span class="built_in">min</span>(h, d[edges[i].to]);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">d[u] = h + <span class="number">1</span>;<span class="comment">//当d[u] = n时说明u点已经退出残留网络</span></span><br><span class="line">numd[d[u]]++;</span><br><span class="line"><span class="keyword">if</span>(u != S)u = pre[u];<span class="comment">//回溯到上一个顶点</span></span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;<span class="comment">//找得到下一个出点就继续找，可省略这句 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max_flow;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0xff</span>, <span class="keyword">sizeof</span> head);<span class="comment">//初始化为 -1</span></span><br><span class="line">    T = n*m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预处理点的id</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m; j++)&#123;</span><br><span class="line">            id[i][j] = <span class="built_in">get_id</span>(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入第一个矩阵</span></span><br><span class="line">    <span class="keyword">int</span> art_i_j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            art_i_j = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">            sum += art_i_j;</span><br><span class="line">            <span class="built_in">add_edge</span>(S, id[i][j], art_i_j);</span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][j], S, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入第二个矩阵</span></span><br><span class="line">    <span class="keyword">int</span> science_i_j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            science_i_j = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">            sum += science_i_j;</span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][j], T, science_i_j);</span><br><span class="line">            <span class="built_in">add_edge</span>(T, id[i][j] , <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入后两个矩阵</span></span><br><span class="line">    <span class="keyword">int</span> new_node_id = n * m + <span class="number">1</span>; <span class="comment">//新点的id从此数 + 1开始</span></span><br><span class="line">    <span class="keyword">int</span> same_art_i_j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            same_art_i_j = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">            sum += same_art_i_j;</span><br><span class="line">            new_node_id++;</span><br><span class="line">            <span class="built_in">add_edge</span>(S, new_node_id, same_art_i_j);<span class="comment">//加一条从源点S到新点的边，权值为same_art_i_j</span></span><br><span class="line">            <span class="built_in">add_edge</span>(new_node_id, S, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">add_edge</span>(new_node_id, id[i][j], inf);</span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][j], new_node_id, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//枚举4个方向合理的邻居并且加边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++)&#123;</span><br><span class="line">                <span class="keyword">int</span> neighbor_x = i + dx[dir], neighbor_y = j + dy[dir];</span><br><span class="line">                <span class="keyword">if</span>(neighbor_x &lt;= <span class="number">0</span> || neighbor_x &gt; n || neighbor_y &lt;= <span class="number">0</span> || neighbor_y &gt; m)<span class="keyword">continue</span>;<span class="comment">//不合法邻居</span></span><br><span class="line">                <span class="built_in">add_edge</span>(new_node_id, id[neighbor_x][neighbor_y], inf);</span><br><span class="line">                <span class="built_in">add_edge</span>(id[neighbor_x][neighbor_y], new_node_id, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> same_science_i_j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            same_science_i_j = <span class="built_in">read</span>();</span><br><span class="line">            </span><br><span class="line">            sum += same_science_i_j;</span><br><span class="line"></span><br><span class="line">            new_node_id++;</span><br><span class="line">            <span class="built_in">add_edge</span>(new_node_id, T, same_science_i_j);<span class="comment">//加一条从新点到汇点 T 的边</span></span><br><span class="line">            <span class="built_in">add_edge</span>(T, new_node_id, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][j], new_node_id, inf);</span><br><span class="line">            <span class="built_in">add_edge</span>(new_node_id, id[i][j], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++)&#123;</span><br><span class="line">                <span class="keyword">int</span> neighbor_x = i + dx[dir], neighbor_y = j + dy[dir];</span><br><span class="line">                <span class="keyword">if</span>(neighbor_x &lt;= <span class="number">0</span> || neighbor_x &gt; n || neighbor_y &lt;= <span class="number">0</span> || neighbor_y &gt; m)<span class="keyword">continue</span>;<span class="comment">//不合法邻居</span></span><br><span class="line">                <span class="built_in">add_edge</span>(id[neighbor_x][neighbor_y], new_node_id, inf);</span><br><span class="line">                <span class="built_in">add_edge</span>(new_node_id, id[neighbor_x][neighbor_y], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tot_point_num = new_node_id;</span><br><span class="line">    cout&lt;&lt;sum - <span class="built_in">ISAP</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Did-you-just-say-……-Acesrc"><a href="#C-Did-you-just-say-……-Acesrc" class="headerlink" title="C. Did you just say …… Acesrc?"></a>C. Did you just say …… Acesrc?</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>在最新推出的爆款游戏《Acesrc的奇妙冒险》中，你需要协助我们机智帅气的主人公Acesrc解决下面的问题:</p><p>一个梯图$(ladder\ graph)L(n)$一个由$2N$个顶点以及$3N−2$条边组成的平面图。它和如下$2\times N$的格点图是同构的。</p><p><img src="http://roundgod.com/resources/wcy-2.png" alt="http://roundgod.com/resources/wcy-2.png"></p><p>你希望删掉$L(n)$中一些边的集合(可能为空)，并保证剩下的图仍然是联通的。计算你有多少种合法的删除的方案。请输出答案对$10^9+7$取模后的结果。</p><p>如果你能做出这道题，Acesrc便会不再做人，成为唯一A皇。对了,你刚才说了Acesrc,……对吧?</p><p><strong>输入格式</strong></p><p>输入仅包含一行，一个正整数N。</p><p><strong>输出格式</strong></p><p>输出仅包含一行，合法的删除的方案数对$10^9+7$取模后的结果。</p><p><strong>样例</strong></p><p><strong>样例输入1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>样例输出1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>样例输入2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1024</span><br></pre></td></tr></table></figure><p><strong>样例输出2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">399356307</span><br></pre></td></tr></table></figure><p><strong>数据范围与提示</strong></p><p>对于$50\%$的数据，有$1\leq N\leq 10^7$。</p><p>对于$100\%%$的数据，有$1\leq N\leq 10^{18}$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211020154943537.png" alt><br>记$g[i]$表示一个$2\times i$​​​的梯图最右侧两个点（上图的 i 和i + i）==不连通，并且整个图只有两个连通分支==的方案数。</p><p>记$f[i]$为$2\times i$的梯图最右侧两个点是连通且整个图只有一个连通分支的方案数。</p><p>考虑状态转移如下：</p><p>$f[i] = 4f[i-1]+g[i-1]$​</p><p>解释：</p><ul><li>在$f[i-1]$的基础上，考虑最后一个格子三条边的情况：</li></ul><p><img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211020162606799.png" alt="image-20211020162606799"></p><p>这四种加边情况都可以保证最后整个图是连通的。</p><ul><li>在$g[i-1]$​的基础上，只能加上图的第一种情况。</li></ul><p>$g[i] = 2f[i-1]+g[i-1]$</p><p>解释：</p><ul><li>在$f[i-1]$​​的基础上，考虑最后一个格子三条边的情况（有两种情况,分别是加上边,加下边）：</li></ul><p><img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211020165138823.png" alt></p><ul><li>在$g[i-1]$的基础上，考虑最后一个格子三条边的情况（只有一种情况,加上边和下边）：</li></ul><p><img src="/2021/10/24/%E7%AC%AC%E5%85%AD%E6%AC%A1OJ/image-20211020165254450.png" alt></p><p>构造矩阵</p><p>$Relation_{-}Matrix = \left(\begin{matrix}4&amp;1\\2&amp;1\end{matrix}\right)$​​</p><p>$\because f[1] = 1, g[1] = 1$​,</p><p>$\therefore \left(\begin{matrix}4&amp;1\\2&amp;1\end{matrix}\right)\left(\begin{matrix}f[1]\\g[1]\end{matrix}\right)=\left(\begin{matrix}f[2]\\g[2]\end{matrix}\right)$</p><p>$ \left(\begin{matrix}4&amp;1\\2&amp;1\end{matrix}\right)^2\left(\begin{matrix}f[1]\\g[1]\end{matrix}\right)=\left(\begin{matrix}4&amp;1\\2&amp;1\end{matrix}\right)\left(\begin{matrix}f[2]\\g[2]\end{matrix}\right) = \left(\begin{matrix}f[3]\\g[3]\end{matrix}\right)$</p><p>$\dots$</p><p>$ \left(\begin{matrix}4&amp;1\\2&amp;1\end{matrix}\right)^{n-1} \left(\begin{matrix}f[1]\\g[1]\end{matrix}\right) =  \left(\begin{matrix}f[n]\\g[n]\end{matrix}\right)$</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    ll data[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(data, <span class="number">0</span>, <span class="keyword">sizeof</span> data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_row_col</span><span class="params">(matrix &amp;m, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">    m.col = col; m.row = row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵乘法</span></span><br><span class="line"><span class="function">matrix <span class="title">matrix_multipy</span><span class="params">(matrix &amp;A, matrix &amp;B)</span></span>&#123;</span><br><span class="line">    matrix ret;</span><br><span class="line">    ret.<span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">set_row_col</span>(ret, A.row, B.col);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= A.row; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= B.col; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= A.col; k++)</span><br><span class="line">              ret.data[i][j] = (ret.data[i][j] + A.data[i][k]*B.data[k][j]%mod)%mod;</span><br><span class="line">              <span class="comment">//注意不要写 += ，否则结果可能超过mod，还得再取一次模</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始矩阵(f[1], g[1])^T</span></span><br><span class="line">    matrix original_matrix;</span><br><span class="line">    original_matrix.<span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">set_row_col</span>(original_matrix, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    original_matrix.data[<span class="number">1</span>][<span class="number">1</span>] = original_matrix.data[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递推矩阵(4, 1, 2, 1)</span></span><br><span class="line">    matrix Relation_Matrix;</span><br><span class="line">    Relation_Matrix.<span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">set_row_col</span>(Relation_Matrix, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Relation_Matrix.data[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">4</span>, Relation_Matrix.data[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    Relation_Matrix.data[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>, Relation_Matrix.data[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用Re_pow存储关系矩阵的 n - 1 次方</span></span><br><span class="line">    n -= <span class="number">1</span>;</span><br><span class="line">    matrix Re_pow;</span><br><span class="line">    Re_pow.<span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">set_row_col</span>(Re_pow, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Re_pow.data[<span class="number">1</span>][<span class="number">1</span>] = Re_pow.data[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;<span class="comment">//Re_pow初始化为单位矩阵</span></span><br><span class="line">    <span class="comment">// 矩阵快速幂加速矩阵乘法</span></span><br><span class="line">    <span class="keyword">while</span>( n )&#123;</span><br><span class="line">        <span class="keyword">if</span>( n &amp; <span class="number">1</span> )Re_pow = <span class="built_in">matrix_multipy</span>(Re_pow, Relation_Matrix);</span><br><span class="line">        Relation_Matrix = <span class="built_in">matrix_multipy</span>(Relation_Matrix, Relation_Matrix);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用递推矩阵的n - 1次方乘以Original_matrix</span></span><br><span class="line">    matrix ret = <span class="built_in">matrix_multipy</span>(Re_pow, original_matrix);</span><br><span class="line">    cout&lt;&lt;ret.data[<span class="number">1</span>][<span class="number">1</span>];<span class="comment">//即f[n]</span></span><br><span class="line">    <span class="comment">// ret.data[1][2]此时为g[n]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第6次OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1599I</title>
      <link href="/2021/10/24/1599I/"/>
      <url>/2021/10/24/1599I/</url>
      
        <content type="html"><![CDATA[<p>预处理:将给定的 N 个点按照 x 从小到大进行排序,设在同一直线上点的编号为$1,2\dots N-1$, 不在直线的点编号为 N </p><div class="note info"><p>若起点恰好是 N ,最优解是$min(dis(1, N-1) + dis(1,N), dis(1, N-1) +dis(N-1, N) )$</p></div> <p><img src="/2021/10/24/1599I/grap.png" alt="这是代替图片的文字，随便写"><br><span id="more"></span><br>证明:假若 N 先经过 i ,$(i\not=N-1, i\not=1)$, 那么此时:</p><p>$total_{-}dis=(\ dis(N, i)+dis(i, N-1) \ )+ dis(N-1, i)+dis(i, 1)$<br>$&gt;dis(N-1, N)+dis(N-1, i)+<br>+dis(i, 1) = dis(N-1, N)+dis(N-1, 1)$</p><div class="note info"><p>若起点不是 N , 固定 $K \leq i&lt; N-1$,<br>$min(dis(k, 1) + dis(1,N), dis(N, i) +dis(k, i) + dis(i, N-1) $<br>,$dis(k, 1) + dis(1, i) + dis(i, N)+dis(N, i+1) + dis(i+1, N))$是候选答案;<br>固定$ 1&lt; j \leq K$, $min(dis(k, N-1) + dis(N-1,N), dis(N, j) +dis(k, j) + dis(j, 1)$<br>$ dis(k, N-1) + dis(N-1, i) + dis(i, N)+dis(N, i-1) + dis(i-1, 1))$是候选答案.</p></div> ]]></content>
      
      
      <categories>
          
          <category> codeforce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/2021/10/20/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
      <url>/2021/10/20/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>对于一般的矩阵乘法:$rank(AB)\leq min\{rank (A), rank(B)\}$<br>设$A=(a_{i, j})_{s\times n}$, 那么$rank(AA’)=rank(AA’) = rank(A) = rank(A’)$ : 矩阵与其转秩矩阵的乘积的秩等于原矩阵的秩.<br><span id="more"></span><br>对于$n$阶方阵而言, $|AB| = |A||B|$</p><p>($Binet-Cauchy$公式)设A是$s\times n$的矩阵,B是$n\times s$的矩阵.</p><ul><li>s &gt; n,那么$|AB|=0$($\because AB_{s\times s};rank(AB)\leq rank(A)\leq n &lt; s, \therefore AB是不满秩的$);</li><li>$s\leq n$,那么$|AB|$等于A的所有s阶子式与B的相应的$s$阶子式的乘积的和.<br>即$|AB|=\sum_{1\leq v_1 &lt; v_2 &lt;\dots &lt; v_s\leq n}A\left( \begin{matrix}1, &amp;2, &amp;\dots,&amp;s\\v_1, &amp;v_2, &amp;\dots, &amp;v_s\end{matrix}\right)B\left( \begin{matrix}v_1, &amp;v_2, &amp;\dots, &amp;v_s\\1, &amp;2, &amp;\dots,&amp;s\end{matrix}\right)$</li></ul><h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><p>对于数域 K 上的矩阵A,若存在 K 上的矩阵 B ,使得$AB=BA=I$, 那么A为可逆矩阵(非奇异矩阵),显然,A是方阵.B 记作 $A^{-1}$</p><p>伴随矩阵:把 n 阶矩阵的第一行元素的代数余子式作为第一行的元素,第二行的元素的代数余子式作为第二行…这样子所形成的$n\times n$矩阵为 A 的伴随矩阵,记为$A*$<br>通过伴随矩阵我们有可逆矩阵的一种写法:<br>$A^{-1}=\frac{A* }{|A|}$,可逆矩阵的充要条件是$|A|=0$</p><p>如果A,B都是 n 阶矩阵,并且AB=I,那么A,B均是可逆矩阵,并且A,B互为可逆矩阵.</p><p>可逆矩阵通过一系列行初等变换之后可以简化为单位矩阵.即$P_s\dots P_2P_1A=I$.因此$A^{-1}=P_s\dots P_2P_1$<br>$A=P_1^{-1}P_2^{-1}\dots P_s^{-1}$.任何一个可逆矩阵都可以写成一系列初等矩阵的乘积.</p><p>性质:</p><ul><li>$(AB)^{-1}=B^{-1}A^{-1}$ 可以推广到一般情况.</li><li>$(A’)^{-1} = (A^{-1})’$</li><li>用一个初等矩阵左乘(右)矩阵A,不改变 A 的秩.更一般的说法:用一个可逆矩阵左乘(右)矩阵A,不改变 A 的秩. 若记可逆矩阵 Q ,那么$rank(QA)=rank(A)$</li></ul><p>除了伴随矩阵的写法,初等变换法也是求可逆矩阵的方法:<br>$\left(\begin{matrix} A|I\end{matrix}\right)\Longrightarrow \left(\begin{matrix} I|A^{-1}\end{matrix}\right)$</p><h2 id="矩阵的分块"><a href="#矩阵的分块" class="headerlink" title="矩阵的分块"></a>矩阵的分块</h2><p>分块矩阵的转秩:<br>如$\left(\begin{matrix} A_1&amp;A_3\\A_2&amp;A_4\end{matrix}\right)’ = \left(\begin{matrix} A_1’ &amp;A_2’\\A_3’ &amp;A_4’\end{matrix}\right)$<br><div class="note default"><p>分块对角矩阵:主对角线上的所有子矩阵都是<strong>方阵</strong>,其余子矩阵全为0的分块矩阵称为分块对角矩阵.简单写作$diag\{A_1, A_2,\dots A_s\}$.<br>类似可以定义分块上(下)三角矩阵.</p></div></p><p>分块矩阵的三种初等行变换:</p><ul><li>左乘 矩阵P加到另一行块:<br>如$\left(\begin{matrix} A_{11}&amp;A_{12}\\A_{21}&amp;A_{22}\end{matrix}\right) = \left(\begin{matrix}A_{11}&amp;A_{12}\\A_{21}+PA_{11}&amp;A_{22}+PA_{12}\end{matrix}\right)$</li><li>两个行块互换位置:<br>如$\left(\begin{matrix} A_{11}&amp;A_{12}\\A_{21}&amp;A_{22}\end{matrix}\right) = \left(\begin{matrix}A_{21}&amp;A_{22}\\A_{11}&amp;A_{12}\end{matrix}\right)$</li><li>用一个可逆矩阵乘以某一行块:<br>如$\left(\begin{matrix} A_{11}&amp;A_{12}\\A_{21}&amp;A_{22}\end{matrix}\right) = \left(\begin{matrix}A_{11}&amp;A_{12}\\PA_{21}&amp;PA_{22}\end{matrix}\right)$实际上相当于对这一局部区域进行若干次初等行变换.</li></ul><div class="note danger"><p>类似定义初等列变换,不过上面的1,3类型变为<strong>右乘</strong>,如右乘 矩阵P加到另一列块:$\left(\begin{matrix} A_{11}&amp;A_{12}\\A_{21}&amp;A_{22}\end{matrix}\right) = \left(\begin{matrix}A_{11}&amp;A_{12}+A_{11}P\\A_{21}&amp;A_{22}+A_{21}P\end{matrix}\right)$</p></div><p>定义:将一个分块单位矩阵经过一次分块矩阵的初等行变换得到的矩阵称为分块初等矩阵.如<br>$\left(\begin{matrix} I &amp;0\\0&amp;I\end{matrix}\right) = \left(\begin{matrix}I&amp;0\\P&amp;I\end{matrix}\right)$<br>对一个分块矩阵 A 做第一种初等行变换,就当于用一个相应的分块初等矩阵<strong>左乘</strong>A.</p><p>例1:<br>设A, B分别是$s\times n, n\times s$矩阵,则<br>$\left|\begin{matrix} I_{n}&amp;B\\A&amp;I_s\end{matrix}\right| = |I_s-AB|$<br>证明:<br>$\left(\begin{matrix}I_n&amp;B\\A&amp;I_{s}\end{matrix}\right) = \left(\begin{matrix}I_n&amp;0\\ -A&amp;I_s\end{matrix}\right)\left(\begin{matrix}I_n&amp;B\\0&amp;I_s-AB\end{matrix}\right)$<br>所以$\left|\begin{matrix}I_n&amp;B\\A&amp;I_{s}\end{matrix}\right| = \left|\begin{matrix}I_n&amp;0\\ -A&amp;I_s\end{matrix}\right|\left|\begin{matrix}I_n&amp;B\\0&amp;I_s-AB\end{matrix}\right|=|I_s-AB|$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
